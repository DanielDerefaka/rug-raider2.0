(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["chunks/node_modules_60e30345._.js", {

"[project]/node_modules/@civic/auth-web3/dist/shared/version.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// This is an auto-generated file. Do not edit.
__turbopack_context__.s({
    "VERSION": (()=>VERSION)
});
const VERSION = "@civic/auth-web3:0.5.5"; //# sourceMappingURL=version.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getVersion": (()=>getVersion),
    "printVersion": (()=>printVersion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$version$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/version.js [middleware-edge] (ecmascript)");
;
;
let versionPrinted = false;
const getVersion = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$version$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["VERSION"];
const printVersion = ()=>{
    if (!versionPrinted) {
        versionPrinted = true;
        if (getVersion() && `${getVersion()}` !== "undefined" && "undefined" !== "undefined" && typeof document !== "undefined") {
            "TURBOPACK unreachable";
        }
    }
}; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$version$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/version.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js (client reference/proxy) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CivicAuthProvider": (()=>CivicAuthProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$server$2d$dom$2d$turbopack$2f$server$2e$edge$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react-server-dom-turbopack/server.edge.js [middleware-edge] (ecmascript)");
;
const CivicAuthProvider = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$server$2d$dom$2d$turbopack$2f$server$2e$edge$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call CivicAuthProvider() from the server but CivicAuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js <module evaluation>", "CivicAuthProvider");
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js (client reference/proxy)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CivicAuthProvider": (()=>CivicAuthProvider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$server$2d$dom$2d$turbopack$2f$server$2e$edge$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/react-server-dom-turbopack/server.edge.js [middleware-edge] (ecmascript)");
;
const CivicAuthProvider = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$server$2d$dom$2d$turbopack$2f$server$2e$edge$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call CivicAuthProvider() from the server but CivicAuthProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js", "CivicAuthProvider");
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$28$client__reference$2f$proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js (client reference/proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$28$client__reference$2f$proxy$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js (client reference/proxy)");
;
__turbopack_context__.n(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$28$client__reference$2f$proxy$29$__);
}}),
"[project]/node_modules/@civic/auth-web3/dist/lib/utils.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Merges two objects, using values from the override object only when they are not null or undefined.
 * Values from the override object will replace values from the default object only if they exist and are not null.
 *
 * @param defaultObj The default object to use as a base
 * @param overrideObj The object containing override values
 * @returns A new object with merged values
 */ __turbopack_context__.s({
    "env": (()=>env),
    "errorMessage": (()=>errorMessage),
    "getCookie": (()=>getCookie),
    "mergeObjectArrayWithoutDuplicates": (()=>mergeObjectArrayWithoutDuplicates),
    "mergeWithDefault": (()=>mergeWithDefault)
});
const mergeWithDefault = (defaultObj, overrideObj)=>{
    if (!overrideObj) return {
        ...defaultObj
    };
    return {
        ...defaultObj,
        ...Object.fromEntries(Object.entries(overrideObj).filter(([, value])=>value != null))
    };
};
const mergeObjectArrayWithoutDuplicates = (arr1, arr2, eq = (a, b)=>a === b)=>{
    const merged = [
        ...arr1
    ];
    for (const obj of arr2){
        if (!merged.some((existing)=>eq(existing, obj))) {
            merged.push(obj);
        }
    }
    return merged;
};
const env = typeof process !== "undefined" ? {
    NEXT_PUBLIC_WALLET_API_BASE_URL: process.env.NEXT_PUBLIC_WALLET_API_BASE_URL
} : {};
const errorMessage = (error)=>{
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === "string") {
        return error;
    }
    return undefined;
};
const getCookie = (name)=>{
    const doc = typeof globalThis.document === "undefined" ? null : globalThis.document;
    if (!doc) return null;
    const value = `; ${doc.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length !== 2) return null;
    return parts.pop()?.split(";").shift() ?? null;
}; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/lib/metakeep/civicApiClient.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CivicMetakeepApiClient": (()=>CivicMetakeepApiClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$utils$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/lib/utils.js [middleware-edge] (ecmascript)");
;
const DEFAULT_BASE_API = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$utils$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["env"].NEXT_PUBLIC_WALLET_API_BASE_URL || "https://api.civic.com/metakeep";
class CivicMetakeepApiClient {
    user;
    // The configuration for the client, including the base URL for the wallet API (defaulted if not provided)
    config;
    walletCreationAllowed = null;
    constructor(user, config = {}){
        this.user = user;
        this.config = {
            ...config,
            endpoints: {
                wallet: DEFAULT_BASE_API,
                ...config?.endpoints
            }
        };
    }
    // An authenticated request to the wallet service to get the configuration
    async getConfig() {
        const url = `${this.config.endpoints.wallet}/config`;
        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${this.user.idToken}`
            }
        });
        if (!response.ok) {
            throw new Error(`Failed to get config: ${response.statusText}`);
        }
        return response.json();
    }
    async getWallet() {
        const url = `${this.config.endpoints.wallet}/wallet`;
        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${this.user.idToken}`
            }
        });
        if (!response.ok) {
            throw new Error(`Failed to get wallet: ${response.statusText}`);
        }
        return response.json();
    }
    async checkWalletCreationPermission() {
        // Return cached result if available
        if (this.walletCreationAllowed !== null) {
            return this.walletCreationAllowed;
        }
        try {
            // TODO re-enable query parameters when the endpoint accepts it
            // const url = `${this.config.endpoints.wallet}/permissions?type=walletCreation`;
            const url = `${this.config.endpoints.wallet}/permissions`;
            const response = await fetch(url, {
                headers: {
                    Authorization: `Bearer ${this.user.idToken}`
                }
            });
            if (!response.ok) {
                console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
                this.walletCreationAllowed = false;
                return false;
            }
            const permissionsCheck = await response.json();
            if (!permissionsCheck.walletCreation?.allowed) {
                console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
                this.walletCreationAllowed = false;
                return false;
            }
            // Store the result
            this.walletCreationAllowed = true;
            return true;
        } catch (error) {
            console.error("Error checking wallet creation permission:", error);
            // For network errors, we don't cache the result and default to true
            // to prevent blocking legitimate users due to temporary issues
            console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            return false;
        }
    }
    async createWallet() {
        // Note: Permission checks are now handled at the Web3Client.build level
        const url = `${this.config.endpoints.wallet}/wallet`;
        const response = await fetch(url, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${this.user.idToken}`
            }
        });
        if (!response.ok) {
            throw new Error(`Failed to create wallet: ${response.statusText}`);
        }
        return response.json();
    }
} //# sourceMappingURL=civicApiClient.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/lib/logger.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "logger": (()=>logger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/lib/logger.js [middleware-edge] (ecmascript)");
;
const logger = {
    web3: {
        metakeep: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createLogger"])("web3:metakeep"),
        wagmi: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createLogger"])("web3:wagmi"),
        provider: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createLogger"])("web3:provider"),
        config: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createLogger"])("web3:config")
    }
}; //# sourceMappingURL=logger.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/lib/metakeep/MetakeepServerWeb3Client.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MetakeepServerWeb3Client": (()=>MetakeepServerWeb3Client)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$metakeep$2f$civicApiClient$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/lib/metakeep/civicApiClient.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/lib/logger.js [middleware-edge] (ecmascript)");
;
;
class MetakeepServerWeb3Client {
    addresses;
    ethereum;
    solana;
    connected = true;
    civicApiClient;
    constructor(addresses, user, config){
        this.addresses = addresses;
        this.ethereum = {
            address: addresses.ethereum
        };
        this.solana = {
            address: addresses.solana
        };
        this.civicApiClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$metakeep$2f$civicApiClient$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["CivicMetakeepApiClient"](user, config);
    }
    async createWallets() {
        // Create wallet if it doesn't exist
        if (!this.addresses.ethereum || !this.addresses.solana) {
            const { wallet } = await this.civicApiClient.createWallet();
            this.addresses = {
                ethereum: wallet.ethAddress,
                solana: wallet.solAddress
            };
            this.ethereum.address = this.addresses.ethereum;
            this.solana.address = this.addresses.solana;
        }
        // At this point, we should definitely have addresses
        if (!this.addresses.ethereum || !this.addresses.solana) {
            throw new Error("Failed to create or retrieve wallet addresses");
        }
        return {
            ethereum: {
                address: this.addresses.ethereum
            },
            solana: {
                address: this.addresses.solana
            }
        };
    }
    async disconnect() {
        // No actual disconnection needed on server side
        this.connected = false;
        return Promise.resolve();
    }
    /**
     * Build a MetakeepServerWeb3Client instance
     * This follows the same pattern as MetakeepWeb3Client.build() to maintain consistency
     */ static async build(config, user) {
        const civicApiClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$metakeep$2f$civicApiClient$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["CivicMetakeepApiClient"](user, config);
        // Extract wallet addresses from user if available
        const { ethWalletAddress, solWalletAddress } = user;
        let addresses = {
            ethereum: ethWalletAddress,
            solana: solWalletAddress
        };
        // If the wallet addresses are not part of the user object
        // assume they don't have a wallet yet, and create one
        if (!ethWalletAddress && !solWalletAddress) {
            // Check if wallet creation is allowed for this app user before attempting to create one
            const isWalletCreationAllowed = await civicApiClient.checkWalletCreationPermission();
            if (!isWalletCreationAllowed) {
                throw new Error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["logger"].web3?.metakeep?.debug?.("No wallet present in user object - creating one");
            const { wallet } = await civicApiClient.createWallet();
            addresses = {
                ethereum: wallet.ethAddress,
                solana: wallet.solAddress
            };
        }
        // If the user still doesn't have a wallet, throw an error
        if (!addresses.ethereum || !addresses.solana) {
            throw new Error(`Failed to create wallet: Eth address: ${addresses.ethereum}, Sol address: ${addresses.solana}`);
        }
        return new MetakeepServerWeb3Client(addresses, user, config);
    }
} //# sourceMappingURL=MetakeepServerWeb3Client.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/server/functions.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWallets": (()=>createWallets),
    "getUser": (()=>getUser),
    "getUserWithAuthDetails": (()=>getUserWithAuthDetails),
    "getWallets": (()=>getWallets)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$server$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/server/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$server$2f$session$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/server/session.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$metakeep$2f$MetakeepServerWeb3Client$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/lib/metakeep/MetakeepServerWeb3Client.js [middleware-edge] (ecmascript)");
;
;
const addressToWallet = (address, type)=>({
        walletAddress: address,
        type
    });
const getWallets = async (user, config)=>{
    // Use the server-side Web3Client implementation instead of the browser-based one
    const web3Client = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$metakeep$2f$MetakeepServerWeb3Client$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["MetakeepServerWeb3Client"].build(config || {}, user);
    return [
        !!web3Client.ethereum?.address && addressToWallet(web3Client.ethereum.address, "ethereum"),
        !!web3Client.solana?.address && addressToWallet(web3Client.solana.address, "solana")
    ].filter((wallet)=>!!wallet);
};
const getUserWithAuthDetails = async (authStorage, authConfig)=>{
    const civicAuth = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$server$2f$session$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["CivicAuth"](authStorage, authConfig);
    const user = await civicAuth.getUser();
    const tokens = await civicAuth.getTokens();
    if (!user?.email || !tokens?.idToken) return null;
    return {
        ...user,
        email: user.email,
        idToken: tokens.idToken
    };
};
const getUser = async (config, authStorage, authConfig)=>{
    const user = await getUserWithAuthDetails(authStorage, authConfig);
    if (!user) return null;
    const wallets = await getWallets(user, config);
    if (wallets.length === 0 || !wallets[0]) {
        return {
            ...user,
            walletAddress: null
        };
    } else {
        return {
            ...user,
            walletAddress: wallets[0].walletAddress
        };
    }
};
const createWallets = async (config, authStorage, authConfig)=>{
    const user = await getUserWithAuthDetails(authStorage, authConfig);
    if (!user) {
        throw new Error("create wallet requires a user and an idToken");
    }
    const wallets = await getWallets(user, config);
    // let the frontend know about the new wallet
    // note - the frontend can also find out by simply reloading - it doesn't rely on this cookie
    // for the wallet information
    await authStorage.set("civic-embedded-wallet", JSON.stringify(wallets));
    return wallets;
}; //# sourceMappingURL=functions.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/webpackPlugin.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "withOptionalSolanaDependencies": (()=>withOptionalSolanaDependencies)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/lib/logger.js [middleware-edge] (ecmascript)");
;
const withOptionalSolanaDependencies = (nextConfig = {}, config)=>{
    if (config.enableSolanaWalletAdapter) {
        // If the user has enabled Solana Wallet Adapter, we don't need to modify the webpack config to use the
        // fallback hooks
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["logger"].web3.config.debug("Enabling Solana Wallet Adapter mode");
        return nextConfig;
    } else {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$lib$2f$logger$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["logger"].web3.config.debug("Disabling Solana Wallet Adapter mode - use fallback hooks in webpack-built projects to avoid dependency import errors.");
    }
    return {
        ...nextConfig,
        webpack (config, options) {
            // First call the original webpack config function if it exists
            if (typeof nextConfig.webpack === "function") {
                config = nextConfig.webpack(config, options);
            }
            // switch the useWallet and useConnection imports to the fallback versions
            // to avoid webpack attempting (and failing) to import the solana wallet-adapter
            config.resolve.alias["./useWalletOptional.js"] = "./useWalletOptionalFallback.js";
            config.resolve.alias["./useConnectionOptional.js"] = "./useConnectionOptionalFallback.js";
            return config;
        }
    };
}; //# sourceMappingURL=webpackPlugin.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/index.js [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCivicAuthPlugin": (()=>createCivicAuthPlugin),
    "createWallets": (()=>createWallets),
    "getUser": (()=>getUser),
    "getWallets": (()=>getWallets)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/config.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$cookies$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/cookies.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/index.js [middleware-edge] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$server$2f$functions$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/server/functions.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$webpackPlugin$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/webpackPlugin.js [middleware-edge] (ecmascript)");
;
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["printVersion"])();
;
;
;
;
;
;
;
const getAuthConfig = ()=>{
    const authConfig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["resolveAuthConfig"])();
    return {
        ...authConfig,
        redirectUrl: authConfig.callbackUrl
    };
};
const getUser = async (config = {})=>{
    const hasValidSession = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isLoggedIn"])();
    if (!hasValidSession) return null;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$server$2f$functions$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["getUser"])(config, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$cookies$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["NextjsCookieStorage"](), getAuthConfig());
};
const createWallets = async (config = {})=>{
    const hasValidSession = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isLoggedIn"])();
    if (!hasValidSession) return null;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$server$2f$functions$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createWallets"])(config, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$cookies$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["NextjsCookieStorage"](), getAuthConfig());
};
const getWallets = async (config = {})=>{
    const user = await getUser(config);
    if (!user) return null;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$server$2f$functions$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["getWallets"])(user, config);
};
const createCivicAuthPlugin = (authConfig)=>{
    const authPlugin = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["createCivicAuthPlugin"])({
        cookies: {
            tokens: {
                id_token: {
                    httpOnly: false
                }
            }
        },
        ...authConfig
    });
    return (nextConfig = {})=>{
        // Apply the civic auth plugin
        const withAuth = authPlugin(nextConfig);
        // Apply the Solana dependency plugin
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$webpackPlugin$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["withOptionalSolanaDependencies"])(withAuth, authConfig);
    };
}; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/index.js [middleware-edge] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$shared$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/shared/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$server$2f$functions$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/server/functions.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$webpackPlugin$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/webpackPlugin.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/index.js [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/@civic/auth-web3/dist/nextjs/index.js [middleware-edge] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CivicAuthProvider": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["CivicAuthProvider"]),
    "NextjsCookieStorage": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$cookies$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["NextjsCookieStorage"]),
    "createCivicAuthPlugin": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createCivicAuthPlugin"]),
    "createWallets": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createWallets"]),
    "defaultAuthConfig": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["defaultAuthConfig"]),
    "getTokens": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getTokens"]),
    "getUser": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getUser"]),
    "getWallets": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getWallets"]),
    "handler": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$routeHandler$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["handler"]),
    "isLoggedIn": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isLoggedIn"]),
    "resolveAuthConfig": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["resolveAuthConfig"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$cookies$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/cookies.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$routeHandler$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/routeHandler.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$config$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/config.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$CivicAuthProvider$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/CivicAuthProvider.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f40$civic$2f$auth$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/@civic/auth/dist/nextjs/index.js [middleware-edge] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$dist$2f$nextjs$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/dist/nextjs/index.js [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/ms/index.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
}}),
"[project]/node_modules/debug/src/common.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_context__.r("[project]/node_modules/ms/index.js [middleware-edge] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(' ', ',').split(',').filter(Boolean);
        for (const ns of split){
            if (ns[0] === '-') {
                createDebug.skips.push(ns.slice(1));
            } else {
                createDebug.names.push(ns);
            }
        }
    }
    /**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */ function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while(searchIndex < search.length){
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
                // Match character or proceed with wildcard
                if (template[templateIndex] === '*') {
                    starIndex = templateIndex;
                    matchIndex = searchIndex;
                    templateIndex++; // Skip the '*'
                } else {
                    searchIndex++;
                    templateIndex++;
                }
            } else if (starIndex !== -1) {
                // Backtrack to the last '*' and try to match more characters
                templateIndex = starIndex + 1;
                matchIndex++;
                searchIndex = matchIndex;
            } else {
                return false; // No match
            }
        }
        // Handle trailing '*' in template
        while(templateIndex < template.length && template[templateIndex] === '*'){
            templateIndex++;
        }
        return templateIndex === template.length;
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        for (const skip of createDebug.skips){
            if (matchesTemplate(name, skip)) {
                return false;
            }
        }
        for (const ns of createDebug.names){
            if (matchesTemplate(name, ns)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;
}}),
"[project]/node_modules/debug/src/browser.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    let m;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    // eslint-disable-next-line no-return-assign
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/common.js [middleware-edge] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};
}}),
"[project]/node_modules/ts-deepmerge/esm/index.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// istanbul ignore next
__turbopack_context__.s({
    "merge": (()=>merge)
});
const isObject = (obj)=>{
    if (typeof obj === "object" && obj !== null) {
        if (typeof Object.getPrototypeOf === "function") {
            const prototype = Object.getPrototypeOf(obj);
            return prototype === Object.prototype || prototype === null;
        }
        return Object.prototype.toString.call(obj) === "[object Object]";
    }
    return false;
};
const merge = (...objects)=>objects.reduce((result, current)=>{
        if (current === undefined) {
            return result;
        }
        if (Array.isArray(current)) {
            throw new TypeError("Arguments provided to ts-deepmerge must be objects, not arrays.");
        }
        Object.keys(current).forEach((key)=>{
            if ([
                "__proto__",
                "constructor",
                "prototype"
            ].includes(key)) {
                return;
            }
            if (Array.isArray(result[key]) && Array.isArray(current[key])) {
                result[key] = merge.options.mergeArrays ? merge.options.uniqueArrayItems ? Array.from(new Set(result[key].concat(current[key]))) : [
                    ...result[key],
                    ...current[key]
                ] : current[key];
            } else if (isObject(result[key]) && isObject(current[key])) {
                result[key] = merge(result[key], current[key]);
            } else if (!isObject(result[key]) && isObject(current[key])) {
                result[key] = merge(current[key], undefined);
            } else {
                result[key] = current[key] === undefined ? merge.options.allowUndefinedOverrides ? current[key] : result[key] : current[key];
            }
        });
        return result;
    }, {});
const defaultOptions = {
    allowUndefinedOverrides: true,
    mergeArrays: true,
    uniqueArrayItems: true
};
merge.options = defaultOptions;
merge.withOptions = (options, ...objects)=>{
    merge.options = Object.assign(Object.assign({}, defaultOptions), options);
    const result = merge(...objects);
    merge.options = defaultOptions;
    return result;
};
}}),
"[project]/node_modules/oslo/dist/crypto/ecdsa.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ECDSA": (()=>ECDSA)
});
class ECDSA {
    hash;
    curve;
    constructor(hash, curve){
        this.hash = hash;
        this.curve = curve;
    }
    async sign(privateKey, data) {
        const cryptoKey = await crypto.subtle.importKey("pkcs8", privateKey, {
            name: "ECDSA",
            namedCurve: this.curve
        }, false, [
            "sign"
        ]);
        const signature = await crypto.subtle.sign({
            name: "ECDSA",
            hash: this.hash
        }, cryptoKey, data);
        return signature;
    }
    async verify(publicKey, signature, data) {
        const cryptoKey = await crypto.subtle.importKey("spki", publicKey, {
            name: "ECDSA",
            namedCurve: this.curve
        }, false, [
            "verify"
        ]);
        return await crypto.subtle.verify({
            name: "ECDSA",
            hash: this.hash
        }, cryptoKey, signature, data);
    }
    async generateKeyPair() {
        const cryptoKeyPair = await crypto.subtle.generateKey({
            name: "ECDSA",
            namedCurve: this.curve
        }, true, [
            "sign"
        ]);
        const privateKey = await crypto.subtle.exportKey("pkcs8", cryptoKeyPair.privateKey);
        const publicKey = await crypto.subtle.exportKey("spki", cryptoKeyPair.publicKey);
        return {
            privateKey,
            publicKey
        };
    }
}
}}),
"[project]/node_modules/oslo/dist/crypto/hmac.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HMAC": (()=>HMAC)
});
class HMAC {
    hash;
    constructor(hash){
        this.hash = hash;
    }
    async verify(key, signature, data) {
        const cryptoKey = await crypto.subtle.importKey("raw", key, {
            name: "HMAC",
            hash: this.hash
        }, false, [
            "verify"
        ]);
        return await crypto.subtle.verify("HMAC", cryptoKey, signature, data);
    }
    async sign(key, data) {
        const cryptoKey = await crypto.subtle.importKey("raw", key, {
            name: "HMAC",
            hash: this.hash
        }, false, [
            "sign"
        ]);
        const signature = await crypto.subtle.sign("HMAC", cryptoKey, data);
        return signature;
    }
    async generateKey() {
        const cryptoKey = await crypto.subtle.generateKey({
            name: "HMAC",
            hash: this.hash
        }, true, [
            "sign"
        ]);
        const key = await crypto.subtle.exportKey("raw", cryptoKey);
        return key;
    }
}
}}),
"[project]/node_modules/oslo/dist/crypto/rsa.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RSASSAPKCS1v1_5": (()=>RSASSAPKCS1v1_5),
    "RSASSAPSS": (()=>RSASSAPSS)
});
class RSASSAPKCS1v1_5 {
    hash;
    constructor(hash){
        this.hash = hash;
    }
    async verify(publicKey, signature, data) {
        const cryptoKey = await crypto.subtle.importKey("spki", publicKey, {
            name: "RSASSA-PKCS1-v1_5",
            hash: this.hash
        }, false, [
            "verify"
        ]);
        return await crypto.subtle.verify("RSASSA-PKCS1-v1_5", cryptoKey, signature, data);
    }
    async sign(privateKey, data) {
        const cryptoKey = await crypto.subtle.importKey("pkcs8", privateKey, {
            name: "RSASSA-PKCS1-v1_5",
            hash: this.hash
        }, false, [
            "sign"
        ]);
        const signature = await crypto.subtle.sign("RSASSA-PKCS1-v1_5", cryptoKey, data);
        return signature;
    }
    async generateKeyPair(modulusLength) {
        const cryptoKeyPair = await crypto.subtle.generateKey({
            name: "RSASSA-PKCS1-v1_5",
            hash: this.hash,
            modulusLength: modulusLength ?? 2048,
            publicExponent: new Uint8Array([
                0x01,
                0x00,
                0x01
            ])
        }, true, [
            "sign"
        ]);
        const privateKey = await crypto.subtle.exportKey("pkcs8", cryptoKeyPair.privateKey);
        const publicKey = await crypto.subtle.exportKey("spki", cryptoKeyPair.publicKey);
        return {
            privateKey,
            publicKey
        };
    }
}
class RSASSAPSS {
    hash;
    saltLength;
    constructor(hash){
        this.hash = hash;
        if (hash === "SHA-1") {
            this.saltLength = 20;
        } else if (hash === "SHA-256") {
            this.saltLength = 32;
        } else if (hash === "SHA-384") {
            this.saltLength = 48;
        } else {
            this.saltLength = 64;
        }
    }
    async verify(publicKey, signature, data) {
        const cryptoKey = await crypto.subtle.importKey("spki", publicKey, {
            name: "RSA-PSS",
            hash: this.hash
        }, false, [
            "verify"
        ]);
        return await crypto.subtle.verify({
            name: "RSA-PSS",
            saltLength: this.saltLength
        }, cryptoKey, signature, data);
    }
    async sign(privateKey, data) {
        const cryptoKey = await crypto.subtle.importKey("pkcs8", privateKey, {
            name: "RSA-PSS",
            hash: this.hash
        }, false, [
            "sign"
        ]);
        const signature = await crypto.subtle.sign({
            name: "RSA-PSS",
            saltLength: this.saltLength
        }, cryptoKey, data);
        return signature;
    }
    async generateKeyPair(modulusLength) {
        const cryptoKeyPair = await crypto.subtle.generateKey({
            name: "RSA-PSS",
            hash: this.hash,
            modulusLength: modulusLength ?? 2048,
            publicExponent: new Uint8Array([
                0x01,
                0x00,
                0x01
            ])
        }, true, [
            "sign"
        ]);
        const privateKey = await crypto.subtle.exportKey("pkcs8", cryptoKeyPair.privateKey);
        const publicKey = await crypto.subtle.exportKey("spki", cryptoKeyPair.publicKey);
        return {
            privateKey,
            publicKey
        };
    }
}
}}),
"[project]/node_modules/oslo/dist/crypto/sha.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sha1": (()=>sha1),
    "sha256": (()=>sha256),
    "sha384": (()=>sha384),
    "sha512": (()=>sha512)
});
async function sha1(data) {
    return await crypto.subtle.digest("SHA-1", data);
}
async function sha256(data) {
    return await crypto.subtle.digest("SHA-256", data);
}
async function sha384(data) {
    return await crypto.subtle.digest("SHA-384", data);
}
async function sha512(data) {
    return await crypto.subtle.digest("SHA-512", data);
}
}}),
"[project]/node_modules/oslo/dist/bytes.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "binaryToInteger": (()=>binaryToInteger),
    "byteToBinary": (()=>byteToBinary),
    "bytesToBinary": (()=>bytesToBinary),
    "bytesToInteger": (()=>bytesToInteger),
    "compareBytes": (()=>compareBytes)
});
function byteToBinary(byte) {
    return byte.toString(2).padStart(8, "0");
}
function bytesToBinary(bytes) {
    return [
        ...bytes
    ].map((val)=>byteToBinary(val)).join("");
}
function binaryToInteger(bits) {
    return parseInt(bits, 2);
}
function bytesToInteger(bytes) {
    return parseInt(bytesToBinary(bytes), 2);
}
function compareBytes(buffer1, buffer2) {
    const bytes1 = new Uint8Array(buffer1);
    const bytes2 = new Uint8Array(buffer2);
    if (bytes1.byteLength !== bytes2.byteLength) return false;
    for(let i = 0; i < bytes1.byteLength; i++){
        if (bytes1[i] !== bytes2[i]) return false;
    }
    return true;
}
}}),
"[project]/node_modules/oslo/dist/crypto/random.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "alphabet": (()=>alphabet),
    "generateRandomInteger": (()=>generateRandomInteger),
    "generateRandomString": (()=>generateRandomString),
    "random": (()=>random)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$bytes$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/bytes.js [middleware-edge] (ecmascript)");
;
function random() {
    const buffer = new ArrayBuffer(8);
    const bytes = crypto.getRandomValues(new Uint8Array(buffer));
    // sets the exponent value (11 bits) to 01111111111 (1023)
    // since the bias is 1023 (2 * (11 - 1) - 1), 1023 - 1023 = 0
    // 2^0 * (1 + [52 bit number between 0-1]) = number between 1-2
    bytes[0] = 63;
    bytes[1] = bytes[1] | 240;
    return new DataView(buffer).getFloat64(0) - 1;
}
function generateRandomInteger(max) {
    if (max < 0 || !Number.isInteger(max)) {
        throw new Error("Argument 'max' must be an integer greater than or equal to 0");
    }
    const bitLength = (max - 1).toString(2).length;
    const shift = bitLength % 8;
    const bytes = new Uint8Array(Math.ceil(bitLength / 8));
    crypto.getRandomValues(bytes);
    // This zeroes bits that can be ignored to increase the chance `result` < `max`.
    // For example, if `max` can be represented with 10 bits, the leading 6 bits of the random 16 bits (2 bytes) can be ignored.
    if (shift !== 0) {
        bytes[0] &= (1 << shift) - 1;
    }
    let result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$bytes$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["bytesToInteger"])(bytes);
    while(result >= max){
        crypto.getRandomValues(bytes);
        if (shift !== 0) {
            bytes[0] &= (1 << shift) - 1;
        }
        result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$bytes$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["bytesToInteger"])(bytes);
    }
    return result;
}
function generateRandomString(length, alphabet) {
    let result = "";
    for(let i = 0; i < length; i++){
        result += alphabet[generateRandomInteger(alphabet.length)];
    }
    return result;
}
function alphabet(...patterns) {
    const patternSet = new Set(patterns);
    let result = "";
    for (const pattern of patternSet){
        if (pattern === "a-z") {
            result += "abcdefghijklmnopqrstuvwxyz";
        } else if (pattern === "A-Z") {
            result += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        } else if (pattern === "0-9") {
            result += "0123456789";
        } else {
            result += pattern;
        }
    }
    return result;
}
}}),
"[project]/node_modules/oslo/dist/crypto/buffer.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "constantTimeEqual": (()=>constantTimeEqual)
});
function constantTimeEqual(a, b) {
    const aBuffer = new Uint8Array(a);
    const bBuffer = new Uint8Array(b);
    if (aBuffer.length !== bBuffer.length) {
        return false;
    }
    let c = 0;
    for(let i = 0; i < aBuffer.length; i++){
        c |= aBuffer[i] ^ bBuffer[i]; // ^: XOR operator
    }
    return c === 0;
}
}}),
"[project]/node_modules/oslo/dist/crypto/index.js [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$ecdsa$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/ecdsa.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$hmac$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/hmac.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$rsa$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/rsa.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$sha$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/sha.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$random$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/random.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$buffer$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/buffer.js [middleware-edge] (ecmascript)");
;
;
;
;
;
;
}}),
"[project]/node_modules/oslo/dist/crypto/index.js [middleware-edge] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$ecdsa$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/ecdsa.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$hmac$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/hmac.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$rsa$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/rsa.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$sha$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/sha.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$random$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/random.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$buffer$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/buffer.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/index.js [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/oslo/dist/encoding/hex.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeHex": (()=>decodeHex),
    "encodeHex": (()=>encodeHex)
});
const hexAlphabet = "0123456789abcdef";
const hexDecodeMap = new Map([
    [
        "0",
        0
    ],
    [
        "1",
        1
    ],
    [
        "2",
        2
    ],
    [
        "3",
        3
    ],
    [
        "4",
        4
    ],
    [
        "5",
        5
    ],
    [
        "6",
        6
    ],
    [
        "7",
        7
    ],
    [
        "8",
        8
    ],
    [
        "9",
        9
    ],
    [
        "A",
        10
    ],
    [
        "B",
        11
    ],
    [
        "C",
        12
    ],
    [
        "D",
        13
    ],
    [
        "E",
        14
    ],
    [
        "F",
        15
    ],
    [
        "a",
        10
    ],
    [
        "b",
        11
    ],
    [
        "c",
        12
    ],
    [
        "d",
        13
    ],
    [
        "e",
        14
    ],
    [
        "f",
        15
    ]
]);
function encodeHex(data) {
    const bytes = new Uint8Array(data);
    let result = "";
    for(let i = 0; i < bytes.length; i++){
        const key1 = bytes[i] >> 4;
        result += hexAlphabet[key1];
        const key2 = bytes[i] & 0x0f;
        result += hexAlphabet[key2];
    }
    return result;
}
function decodeHex(data) {
    const chunkCount = Math.ceil(data.length / 2);
    const result = new Uint8Array(chunkCount);
    for(let i = 0; i < chunkCount; i++){
        let buffer = 0;
        const encoded1 = data[i * 2];
        const value1 = hexDecodeMap.get(encoded1) ?? null;
        if (value1 === null) {
            throw new Error(`Invalid character: ${encoded1}`);
        }
        buffer += value1 << 4;
        const encoded2 = data[i * 2 + 1];
        if (encoded2 === undefined) {
            throw new Error("Invalid data");
        }
        const value2 = hexDecodeMap.get(encoded2) ?? null;
        if (value2 === null) {
            throw new Error(`Invalid character: ${encoded1}`);
        }
        buffer += value2;
        result[i] = buffer;
    }
    return result;
}
}}),
"[project]/node_modules/oslo/dist/encoding/base32.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Base32Encoding": (()=>Base32Encoding),
    "base32": (()=>base32),
    "base32hex": (()=>base32hex),
    "decodeBase32": (()=>decodeBase32),
    "encodeBase32": (()=>encodeBase32)
});
class Base32Encoding {
    alphabet;
    padding;
    decodeMap = new Map();
    constructor(alphabet, options){
        if (alphabet.length !== 32) {
            throw new Error("Invalid alphabet");
        }
        this.alphabet = alphabet;
        this.padding = options?.padding ?? "=";
        if (this.alphabet.includes(this.padding) || this.padding.length !== 1) {
            throw new Error("Invalid padding");
        }
        for(let i = 0; i < alphabet.length; i++){
            this.decodeMap.set(alphabet[i], i);
        }
    }
    encode(data, options) {
        let result = "";
        let buffer = 0;
        let shift = 0;
        for(let i = 0; i < data.length; i++){
            buffer = buffer << 8 | data[i];
            shift += 8;
            while(shift >= 5){
                shift -= 5;
                result += this.alphabet[buffer >> shift & 0x1f];
            }
        }
        if (shift > 0) {
            result += this.alphabet[buffer << 5 - shift & 0x1f];
        }
        const includePadding = options?.includePadding ?? true;
        if (includePadding) {
            const padCount = (8 - result.length % 8) % 8;
            for(let i = 0; i < padCount; i++){
                result += "=";
            }
        }
        return result;
    }
    decode(data, options) {
        const strict = options?.strict ?? true;
        const chunkCount = Math.ceil(data.length / 8);
        const result = [];
        for(let i = 0; i < chunkCount; i++){
            let padCount = 0;
            const chunks = [];
            for(let j = 0; j < 8; j++){
                const encoded = data[i * 8 + j];
                if (encoded === "=") {
                    if (i + 1 !== chunkCount) {
                        throw new Error(`Invalid character: ${encoded}`);
                    }
                    padCount += 1;
                    continue;
                }
                if (encoded === undefined) {
                    if (strict) {
                        throw new Error("Invalid data");
                    }
                    padCount += 1;
                    continue;
                }
                const value = this.decodeMap.get(encoded) ?? null;
                if (value === null) {
                    throw new Error(`Invalid character: ${encoded}`);
                }
                chunks.push(value);
            }
            if (padCount === 8 || padCount === 7 || padCount === 5 || padCount === 2) {
                throw new Error("Invalid padding");
            }
            const byte1 = (chunks[0] << 3) + (chunks[1] >> 2);
            result.push(byte1);
            if (padCount < 6) {
                const byte2 = ((chunks[1] & 0x03) << 6) + (chunks[2] << 1) + (chunks[3] >> 4);
                result.push(byte2);
            }
            if (padCount < 4) {
                const byte3 = ((chunks[3] & 0xff) << 4) + (chunks[4] >> 1);
                result.push(byte3);
            }
            if (padCount < 3) {
                const byte4 = ((chunks[4] & 0x01) << 7) + (chunks[5] << 2) + (chunks[6] >> 3);
                result.push(byte4);
            }
            if (padCount < 1) {
                const byte5 = ((chunks[6] & 0x07) << 5) + chunks[7];
                result.push(byte5);
            }
        }
        return Uint8Array.from(result);
    }
}
const base32 = new Base32Encoding("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
const base32hex = new Base32Encoding("0123456789ABCDEFGHIJKLMNOPQRSTUV");
function encodeBase32(data, options) {
    return base32.encode(new Uint8Array(data), {
        includePadding: options?.padding ?? true
    });
}
function decodeBase32(data) {
    return base32.decode(data, {
        strict: false
    });
}
}}),
"[project]/node_modules/oslo/dist/encoding/base64.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Base64Encoding": (()=>Base64Encoding),
    "base64": (()=>base64),
    "base64url": (()=>base64url),
    "decodeBase64": (()=>decodeBase64),
    "decodeBase64url": (()=>decodeBase64url),
    "encodeBase64": (()=>encodeBase64),
    "encodeBase64url": (()=>encodeBase64url)
});
class Base64Encoding {
    alphabet;
    padding;
    decodeMap = new Map();
    constructor(alphabet, options){
        if (alphabet.length !== 64) {
            throw new Error("Invalid alphabet");
        }
        this.alphabet = alphabet;
        this.padding = options?.padding ?? "=";
        if (this.alphabet.includes(this.padding) || this.padding.length !== 1) {
            throw new Error("Invalid padding");
        }
        for(let i = 0; i < alphabet.length; i++){
            this.decodeMap.set(alphabet[i], i);
        }
    }
    encode(data, options) {
        let result = "";
        let buffer = 0;
        let shift = 0;
        for(let i = 0; i < data.length; i++){
            buffer = buffer << 8 | data[i];
            shift += 8;
            while(shift >= 6){
                shift += -6;
                result += this.alphabet[buffer >> shift & 0x3f];
            }
        }
        if (shift > 0) {
            result += this.alphabet[buffer << 6 - shift & 0x3f];
        }
        const includePadding = options?.includePadding ?? true;
        if (includePadding) {
            const padCount = (4 - result.length % 4) % 4;
            for(let i = 0; i < padCount; i++){
                result += "=";
            }
        }
        return result;
    }
    decode(data, options) {
        const strict = options?.strict ?? true;
        const chunkCount = Math.ceil(data.length / 4);
        const result = [];
        for(let i = 0; i < chunkCount; i++){
            let padCount = 0;
            let buffer = 0;
            for(let j = 0; j < 4; j++){
                const encoded = data[i * 4 + j];
                if (encoded === "=") {
                    if (i + 1 !== chunkCount) {
                        throw new Error(`Invalid character: ${encoded}`);
                    }
                    padCount += 1;
                    continue;
                }
                if (encoded === undefined) {
                    if (strict) {
                        throw new Error("Invalid data");
                    }
                    padCount += 1;
                    continue;
                }
                const value = this.decodeMap.get(encoded) ?? null;
                if (value === null) {
                    throw new Error(`Invalid character: ${encoded}`);
                }
                buffer += value << 6 * (3 - j);
            }
            result.push(buffer >> 16 & 0xff);
            if (padCount < 2) {
                result.push(buffer >> 8 & 0xff);
            }
            if (padCount < 1) {
                result.push(buffer & 0xff);
            }
        }
        return Uint8Array.from(result);
    }
}
const base64 = new Base64Encoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
const base64url = new Base64Encoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
function encodeBase64(data, options) {
    return base64.encode(new Uint8Array(data), {
        includePadding: options?.padding ?? true
    });
}
function decodeBase64(data) {
    return base64.decode(data, {
        strict: false
    });
}
function encodeBase64url(data) {
    return base64.encode(new Uint8Array(data), {
        includePadding: false
    });
}
function decodeBase64url(data) {
    return base64url.decode(data, {
        strict: false
    });
}
}}),
"[project]/node_modules/oslo/dist/encoding/index.js [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$hex$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/hex.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base32$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/base32.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/base64.js [middleware-edge] (ecmascript)");
;
;
;
;
;
}}),
"[project]/node_modules/oslo/dist/encoding/index.js [middleware-edge] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$hex$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/hex.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base32$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/base32.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/base64.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/index.js [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/oslo/dist/oauth2/index.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OAuth2Client": (()=>OAuth2Client),
    "OAuth2RequestError": (()=>OAuth2RequestError),
    "generateCodeVerifier": (()=>generateCodeVerifier),
    "generateState": (()=>generateState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$sha$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/crypto/sha.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/index.js [middleware-edge] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/oslo/dist/encoding/base64.js [middleware-edge] (ecmascript)");
;
;
class OAuth2Client {
    clientId;
    authorizeEndpoint;
    tokenEndpoint;
    redirectURI;
    constructor(clientId, authorizeEndpoint, tokenEndpoint, options){
        this.clientId = clientId;
        this.authorizeEndpoint = authorizeEndpoint;
        this.tokenEndpoint = tokenEndpoint;
        this.redirectURI = options?.redirectURI ?? null;
    }
    async createAuthorizationURL(options) {
        const scopes = Array.from(new Set(options?.scopes ?? [])); // remove duplicates
        const authorizationUrl = new URL(this.authorizeEndpoint);
        authorizationUrl.searchParams.set("response_type", "code");
        authorizationUrl.searchParams.set("client_id", this.clientId);
        if (options?.state !== undefined) {
            authorizationUrl.searchParams.set("state", options.state);
        }
        if (scopes.length > 0) {
            authorizationUrl.searchParams.set("scope", scopes.join(" "));
        }
        if (this.redirectURI !== null) {
            authorizationUrl.searchParams.set("redirect_uri", this.redirectURI);
        }
        if (options?.codeVerifier !== undefined) {
            const codeChallengeMethod = options?.codeChallengeMethod ?? "S256";
            if (codeChallengeMethod === "S256") {
                const codeChallengeBuffer = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$crypto$2f$sha$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["sha256"])(new TextEncoder().encode(options.codeVerifier));
                const codeChallenge = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64url"].encode(new Uint8Array(codeChallengeBuffer), {
                    includePadding: false
                });
                authorizationUrl.searchParams.set("code_challenge", codeChallenge);
                authorizationUrl.searchParams.set("code_challenge_method", "S256");
            } else if (codeChallengeMethod === "plain") {
                authorizationUrl.searchParams.set("code_challenge", options.codeVerifier);
                authorizationUrl.searchParams.set("code_challenge_method", "plain");
            } else {
                throw new TypeError(`Invalid value for 'codeChallengeMethod': ${codeChallengeMethod}`);
            }
        }
        return authorizationUrl;
    }
    async validateAuthorizationCode(authorizationCode, options) {
        const body = new URLSearchParams();
        body.set("code", authorizationCode);
        body.set("client_id", this.clientId);
        body.set("grant_type", "authorization_code");
        if (this.redirectURI !== null) {
            body.set("redirect_uri", this.redirectURI);
        }
        if (options?.codeVerifier !== undefined) {
            body.set("code_verifier", options.codeVerifier);
        }
        return await this.sendTokenRequest(body, options);
    }
    async refreshAccessToken(refreshToken, options) {
        const body = new URLSearchParams();
        body.set("refresh_token", refreshToken);
        body.set("client_id", this.clientId);
        body.set("grant_type", "refresh_token");
        const scopes = Array.from(new Set(options?.scopes ?? [])); // remove duplicates
        if (scopes.length > 0) {
            body.set("scope", scopes.join(" "));
        }
        return await this.sendTokenRequest(body, options);
    }
    async sendTokenRequest(body, options) {
        const headers = new Headers();
        headers.set("Content-Type", "application/x-www-form-urlencoded");
        headers.set("Accept", "application/json");
        headers.set("User-Agent", "oslo");
        if (options?.credentials !== undefined) {
            const authenticateWith = options?.authenticateWith ?? "http_basic_auth";
            if (authenticateWith === "http_basic_auth") {
                const encodedCredentials = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64"].encode(new TextEncoder().encode(`${this.clientId}:${options.credentials}`));
                headers.set("Authorization", `Basic ${encodedCredentials}`);
            } else if (authenticateWith === "request_body") {
                body.set("client_secret", options.credentials);
            } else {
                throw new TypeError(`Invalid value for 'authenticateWith': ${authenticateWith}`);
            }
        }
        const request = new Request(this.tokenEndpoint, {
            method: "POST",
            headers,
            body
        });
        const response = await fetch(request);
        const result = await response.json();
        // providers are allowed to return non-400 status code for errors
        if (!("access_token" in result) && "error" in result) {
            throw new OAuth2RequestError(request, result);
        } else if (!response.ok) {
            throw new OAuth2RequestError(request, {});
        }
        return result;
    }
}
function generateCodeVerifier() {
    const randomValues = new Uint8Array(32);
    crypto.getRandomValues(randomValues);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64url"].encode(randomValues, {
        includePadding: false
    });
}
function generateState() {
    const randomValues = new Uint8Array(32);
    crypto.getRandomValues(randomValues);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$oslo$2f$dist$2f$encoding$2f$base64$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["base64url"].encode(randomValues, {
        includePadding: false
    });
}
class OAuth2RequestError extends Error {
    request;
    description;
    constructor(request, body){
        super(body.error ?? "");
        this.request = request;
        this.description = body.error_description ?? null;
    }
}
}}),
"[project]/node_modules/uuid/dist/esm-browser/native.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
const __TURBOPACK__default__export__ = {
    randomUUID
};
}}),
"[project]/node_modules/uuid/dist/esm-browser/rng.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
__turbopack_context__.s({
    "default": (()=>rng)
});
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) {
            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
    }
    return getRandomValues(rnds8);
}
}}),
"[project]/node_modules/uuid/dist/esm-browser/regex.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
const __TURBOPACK__default__export__ = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
}}),
"[project]/node_modules/uuid/dist/esm-browser/validate.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$regex$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/regex.js [middleware-edge] (ecmascript)");
;
function validate(uuid) {
    return typeof uuid === 'string' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$regex$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"].test(uuid);
}
const __TURBOPACK__default__export__ = validate;
}}),
"[project]/node_modules/uuid/dist/esm-browser/stringify.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__),
    "unsafeStringify": (()=>unsafeStringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$validate$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/validate.js [middleware-edge] (ecmascript)");
;
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i){
    byteToHex.push((i + 0x100).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    //
    // Note to future-self: No, you can't remove the `toLowerCase()` call.
    // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351
    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
function stringify(arr, offset = 0) {
    var uuid = unsafeStringify(arr, offset);
    // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$validate$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"])(uuid)) {
        throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
}
const __TURBOPACK__default__export__ = stringify;
}}),
"[project]/node_modules/uuid/dist/esm-browser/v4.js [middleware-edge] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$native$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/native.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$rng$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/rng.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$stringify$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/stringify.js [middleware-edge] (ecmascript)");
;
;
;
function v4(options, buf, offset) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$native$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"].randomUUID && !buf && !options) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$native$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"].randomUUID();
    }
    options = options || {};
    var rnds = options.random || (options.rng || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$rng$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"])();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;
    // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i){
            buf[offset + i] = rnds[i];
        }
        return buf;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$stringify$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["unsafeStringify"])(rnds);
}
const __TURBOPACK__default__export__ = v4;
}}),
"[project]/node_modules/uuid/dist/esm-browser/v4.js [middleware-edge] (ecmascript) <export default as v4>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "v4": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$v4$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$browser$2f$v4$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uuid/dist/esm-browser/v4.js [middleware-edge] (ecmascript)");
}}),
"[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var has = Object.prototype.hasOwnProperty, prefix = '~';
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */ function Events() {}
//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
    Events.prototype = Object.create(null);
    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */ function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */ function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
    }
    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [
        emitter._events[evt],
        listener
    ];
    return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */ function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */ function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */ EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0) return names;
    for(name in events = this._events){
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }
    if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
    }
    return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */ EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [
        handlers.fn
    ];
    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++){
        ee[i] = handlers[i].fn;
    }
    return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */ EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
        switch(len){
            case 1:
                return listeners.fn.call(listeners.context), true;
            case 2:
                return listeners.fn.call(listeners.context, a1), true;
            case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for(i = 1, args = new Array(len - 1); i < len; i++){
            args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
    } else {
        var length = listeners.length, j;
        for(i = 0; i < length; i++){
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
            switch(len){
                case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                default:
                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){
                        args[j - 1] = arguments[j];
                    }
                    listeners[i].fn.apply(listeners[i].context, args);
            }
        }
    }
    return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
        clearEvent(this, evt);
        return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
        }
    } else {
        for(var i = 0, events = [], length = listeners.length; i < length; i++){
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                events.push(listeners[i]);
            }
        }
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
    }
    return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
    } else {
        this._events = new Events();
        this._eventsCount = 0;
    }
    return this;
};
//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;
//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;
//
// Expose the module.
//
if ("TURBOPACK compile-time truthy", 1) {
    module.exports = EventEmitter;
}
}}),
"[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.mjs [middleware-edge] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.js [middleware-edge] (ecmascript)");
;
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"];
}}),
"[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.mjs [middleware-edge] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.js [middleware-edge] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.mjs [middleware-edge] (ecmascript) <locals>");
}}),
"[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.js [middleware-edge] (ecmascript) <export default as EventEmitter>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "EventEmitter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$civic$2f$auth$2d$web3$2f$node_modules$2f$eventemitter3$2f$index$2e$js__$5b$middleware$2d$edge$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@civic/auth-web3/node_modules/eventemitter3/index.js [middleware-edge] (ecmascript)");
}}),
}]);

//# sourceMappingURL=node_modules_60e30345._.js.map