module.exports = {

"[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addHexPrefix": (()=>addHexPrefix),
    "bigInt64ToBytes": (()=>bigInt64ToBytes),
    "bigIntMax": (()=>bigIntMax),
    "bigIntMin": (()=>bigIntMin),
    "bigIntToAddressBytes": (()=>bigIntToAddressBytes),
    "bigIntToBytes": (()=>bigIntToBytes),
    "bigIntToHex": (()=>bigIntToHex),
    "bigIntToUnpaddedBytes": (()=>bigIntToUnpaddedBytes),
    "bytesToBigInt": (()=>bytesToBigInt),
    "bytesToBigInt64": (()=>bytesToBigInt64),
    "bytesToHex": (()=>bytesToHex),
    "bytesToInt": (()=>bytesToInt),
    "bytesToInt32": (()=>bytesToInt32),
    "bytesToUnprefixedHex": (()=>bytesToUnprefixedHex),
    "compareBytes": (()=>compareBytes),
    "concatBytes": (()=>concatBytes),
    "fromSigned": (()=>fromSigned),
    "hexToBigInt": (()=>hexToBigInt),
    "hexToBytes": (()=>hexToBytes),
    "int32ToBytes": (()=>int32ToBytes),
    "intToBytes": (()=>intToBytes),
    "intToHex": (()=>intToHex),
    "intToUnpaddedBytes": (()=>intToUnpaddedBytes),
    "randomBytes": (()=>randomBytes),
    "setLengthLeft": (()=>setLengthLeft),
    "setLengthRight": (()=>setLengthRight),
    "short": (()=>short),
    "toBytes": (()=>toBytes),
    "toUnsigned": (()=>toUnsigned),
    "unpadArray": (()=>unpadArray),
    "unpadBytes": (()=>unpadBytes),
    "unpadHex": (()=>unpadHex),
    "unprefixedHexToBytes": (()=>unprefixedHexToBytes),
    "validateNoLeadingZeroes": (()=>validateNoLeadingZeroes),
    "zeros": (()=>zeros)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$random$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/random.js [app-ssr] (ecmascript)");
// eslint-disable-next-line no-restricted-imports
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/utils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
;
;
;
;
const BIGINT_0 = BigInt(0);
const bytesToUnprefixedHex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bytesToHex"];
// hexToBytes cache
const hexToBytesMapFirstKey = {};
const hexToBytesMapSecondKey = {};
for(let i = 0; i < 16; i++){
    const vSecondKey = i;
    const vFirstKey = i * 16;
    const key = i.toString(16).toLowerCase();
    hexToBytesMapSecondKey[key] = vSecondKey;
    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;
    hexToBytesMapFirstKey[key] = vFirstKey;
    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;
}
/**
 * NOTE: only use this function if the string is even, and only consists of hex characters
 * If this is not the case, this function could return weird results
 * @deprecated
 */ function _unprefixedHexToBytes(hex) {
    const byteLen = hex.length;
    const bytes = new Uint8Array(byteLen / 2);
    for(let i = 0; i < byteLen; i += 2){
        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];
    }
    return bytes;
}
const unprefixedHexToBytes = (inp)=>{
    if (inp.slice(0, 2) === '0x') {
        throw new Error('hex string is prefixed with 0x, should be unprefixed');
    } else {
        return _unprefixedHexToBytes((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padToEven"])(inp));
    }
};
/****************  Borrowed from @chainsafe/ssz */ // Caching this info costs about ~1000 bytes and speeds up toHexString() by x6
const hexByByte = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, '0'));
const bytesToHex = (bytes)=>{
    let hex = `0x`;
    if (bytes === undefined || bytes.length === 0) return hex;
    for (const byte of bytes){
        hex = `${hex}${hexByByte[byte]}`;
    }
    return hex;
};
// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)
const BIGINT_CACHE = [];
for(let i = 0; i <= 256 * 256 - 1; i++){
    BIGINT_CACHE[i] = BigInt(i);
}
const bytesToBigInt = (bytes, littleEndian = false)=>{
    if (littleEndian) {
        bytes.reverse();
    }
    const hex = bytesToHex(bytes);
    if (hex === '0x') {
        return BIGINT_0;
    }
    if (hex.length === 4) {
        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)
        return BIGINT_CACHE[bytes[0]];
    }
    if (hex.length === 6) {
        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];
    }
    return BigInt(hex);
};
const bytesToInt = (bytes)=>{
    const res = Number(bytesToBigInt(bytes));
    if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');
    return res;
};
const hexToBytes = (hex)=>{
    if (typeof hex !== 'string') {
        throw new Error(`hex argument type ${typeof hex} must be of type string`);
    }
    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {
        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);
    }
    const unprefixedHex = hex.slice(2);
    return _unprefixedHexToBytes(unprefixedHex.length % 2 === 0 ? unprefixedHex : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padToEven"])(unprefixedHex));
};
const intToHex = (i)=>{
    if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error(`Received an invalid integer type: ${i}`);
    }
    return `0x${i.toString(16)}`;
};
const intToBytes = (i)=>{
    const hex = intToHex(i);
    return hexToBytes(hex);
};
const bigIntToBytes = (num, littleEndian = false)=>{
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const bytes = toBytes(`0x${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["padToEven"])(num.toString(16))}`);
    return littleEndian ? bytes.reverse() : bytes;
};
const zeros = (bytes)=>{
    return new Uint8Array(bytes);
};
/**
 * Pads a `Uint8Array` with zeros till it has `length` bytes.
 * Truncates the beginning or end of input if its length exceeds `length`.
 * @param {Uint8Array} msg the value to pad
 * @param {number} length the number of bytes the output should be
 * @param {boolean} right whether to start padding form the left or right
 * @return {Uint8Array}
 */ const setLength = (msg, length, right)=>{
    if (right) {
        if (msg.length < length) {
            return new Uint8Array([
                ...msg,
                ...zeros(length - msg.length)
            ]);
        }
        return msg.subarray(0, length);
    } else {
        if (msg.length < length) {
            return new Uint8Array([
                ...zeros(length - msg.length),
                ...msg
            ]);
        }
        return msg.subarray(-length);
    }
};
const setLengthLeft = (msg, length)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(msg);
    return setLength(msg, length, false);
};
const setLengthRight = (msg, length)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(msg);
    return setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Uint8Array`, `number[]` or `string`.
 * @param {Uint8Array|number[]|string} a
 * @return {Uint8Array|number[]|string}
 */ const stripZeros = (a)=>{
    let first = a[0];
    while(a.length > 0 && first.toString() === '0'){
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
const unpadBytes = (a)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(a);
    return stripZeros(a);
};
const unpadArray = (a)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsArray"])(a);
    return stripZeros(a);
};
const unpadHex = (a)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsHexString"])(a);
    return `0x${stripZeros((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stripHexPrefix"])(a))}`;
};
const toBytes = (v)=>{
    if (v === null || v === undefined) {
        return new Uint8Array();
    }
    if (Array.isArray(v) || v instanceof Uint8Array) {
        return Uint8Array.from(v);
    }
    if (typeof v === 'string') {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(v)) {
            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);
        }
        return hexToBytes(v);
    }
    if (typeof v === 'number') {
        return intToBytes(v);
    }
    if (typeof v === 'bigint') {
        if (v < BIGINT_0) {
            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);
        }
        let n = v.toString(16);
        if (n.length % 2) n = '0' + n;
        return unprefixedHexToBytes(n);
    }
    if (v.toBytes !== undefined) {
        // converts a `TransformableToBytes` object to a Uint8Array
        return v.toBytes();
    }
    throw new Error('invalid type');
};
const fromSigned = (num)=>{
    return BigInt.asIntN(256, bytesToBigInt(num));
};
const toUnsigned = (num)=>{
    return bigIntToBytes(BigInt.asUintN(256, num));
};
const addHexPrefix = (str)=>{
    if (typeof str !== 'string') {
        return str;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(str) ? str : `0x${str}`;
};
const short = (bytes, maxLength = 50)=>{
    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;
    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;
    if (byteStr.length <= len) {
        return byteStr;
    }
    return byteStr.slice(0, len) + '…';
};
const validateNoLeadingZeroes = (values)=>{
    for (const [k, v] of Object.entries(values)){
        if (v !== undefined && v.length > 0 && v[0] === 0) {
            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);
        }
    }
};
const bigIntToHex = (num)=>{
    return `0x${num.toString(16)}`;
};
const bigIntMax = (...args)=>args.reduce((m, e)=>e > m ? e : m);
const bigIntMin = (...args)=>args.reduce((m, e)=>e < m ? e : m);
const bigIntToUnpaddedBytes = (value)=>{
    return unpadBytes(bigIntToBytes(value));
};
const bigIntToAddressBytes = (value, strict = true)=>{
    const addressBytes = bigIntToBytes(value);
    if (strict && addressBytes.length > 20) {
        throw Error(`Invalid address bytes length=${addressBytes.length} strict=${strict}`);
    }
    // setLength already slices if more than requisite length
    return setLengthLeft(addressBytes, 20);
};
const intToUnpaddedBytes = (value)=>{
    return unpadBytes(intToBytes(value));
};
const compareBytes = (value1, value2)=>{
    const bigIntValue1 = bytesToBigInt(value1);
    const bigIntValue2 = bytesToBigInt(value2);
    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;
};
const randomBytes = (length)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$random$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRandomBytesSync"])(length);
};
const concatBytes = (...arrays)=>{
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
};
function bytesToInt32(bytes, littleEndian = false) {
    if (bytes.length < 4) {
        bytes = setLength(bytes, 4, littleEndian);
    }
    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    return dataView.getUint32(0, littleEndian);
}
function bytesToBigInt64(bytes, littleEndian = false) {
    if (bytes.length < 8) {
        bytes = setLength(bytes, 8, littleEndian);
    }
    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    return dataView.getBigUint64(0, littleEndian);
}
function int32ToBytes(value, littleEndian = false) {
    const buffer = new ArrayBuffer(4);
    const dataView = new DataView(buffer);
    dataView.setUint32(0, value, littleEndian);
    return new Uint8Array(buffer);
}
function bigInt64ToBytes(value, littleEndian = false) {
    const buffer = new ArrayBuffer(8);
    const dataView = new DataView(buffer);
    dataView.setBigUint64(0, value, littleEndian);
    return new Uint8Array(buffer);
}
;
function hexToBigInt(input) {
    return bytesToBigInt(hexToBytes((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(input) ? input : `0x${input}`));
} //# sourceMappingURL=bytes.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
The MIT License

Copyright (c) 2016 Nick Dodson. nickdodson.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE
 */ __turbopack_context__.s({
    "arrayContainsArray": (()=>arrayContainsArray),
    "fromAscii": (()=>fromAscii),
    "fromUtf8": (()=>fromUtf8),
    "getBinarySize": (()=>getBinarySize),
    "getKeys": (()=>getKeys),
    "isHexString": (()=>isHexString),
    "padToEven": (()=>padToEven),
    "stripHexPrefix": (()=>stripHexPrefix),
    "toAscii": (()=>toAscii)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
;
function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length) return false;
    return true;
}
const stripHexPrefix = (str)=>{
    if (typeof str !== 'string') throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
    return isHexString(str) ? str.slice(2) : str;
};
function padToEven(value) {
    let a = value;
    if (typeof a !== 'string') {
        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
    }
    if (a.length % 2) a = `0${a}`;
    return a;
}
function getBinarySize(str) {
    if (typeof str !== 'string') {
        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utf8ToBytes"])(str).byteLength;
}
function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) {
        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);
    }
    if (Array.isArray(subset) !== true) {
        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);
    }
    return subset[some === true ? 'some' : 'every']((value)=>superset.indexOf(value) >= 0);
}
function toAscii(hex) {
    let str = '';
    let i = 0;
    const l = hex.length;
    if (hex.substring(0, 2) === '0x') i = 2;
    for(; i < l; i += 2){
        const code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }
    return str;
}
function fromUtf8(stringValue) {
    const str = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utf8ToBytes"])(stringValue);
    return `0x${padToEven((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToUnprefixedHex"])(str)).replace(/^0+|0+$/g, '')}`;
}
function fromAscii(stringValue) {
    let hex = '';
    for(let i = 0; i < stringValue.length; i++){
        const code = stringValue.charCodeAt(i);
        const n = code.toString(16);
        hex += n.length < 2 ? `0${n}` : n;
    }
    return `0x${hex}`;
}
function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) {
        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);
    }
    if (typeof key !== 'string') {
        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);
    }
    const result = [];
    for(let i = 0; i < params.length; i++){
        let value = params[i][key];
        if (allowEmpty === true && !value) {
            value = '';
        } else if (typeof value !== 'string') {
            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);
        }
        result.push(value);
    }
    return result;
} //# sourceMappingURL=internal.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/helpers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assertIsArray": (()=>assertIsArray),
    "assertIsBytes": (()=>assertIsBytes),
    "assertIsHexString": (()=>assertIsHexString),
    "assertIsString": (()=>assertIsString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
;
const assertIsHexString = function(input) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(input)) {
        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
        throw new Error(msg);
    }
};
const assertIsBytes = function(input) {
    if (!(input instanceof Uint8Array)) {
        const msg = `This method only supports Uint8Array but input was: ${input}`;
        throw new Error(msg);
    }
};
const assertIsArray = function(input) {
    if (!Array.isArray(input)) {
        const msg = `This method only supports number arrays but input was: ${input}`;
        throw new Error(msg);
    }
};
const assertIsString = function(input) {
    if (typeof input !== 'string') {
        const msg = `This method only supports strings but input was: ${input}`;
        throw new Error(msg);
    }
}; //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$random$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/random.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/utils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BIGINT_0": (()=>BIGINT_0),
    "BIGINT_1": (()=>BIGINT_1),
    "BIGINT_100": (()=>BIGINT_100),
    "BIGINT_128": (()=>BIGINT_128),
    "BIGINT_160": (()=>BIGINT_160),
    "BIGINT_2": (()=>BIGINT_2),
    "BIGINT_224": (()=>BIGINT_224),
    "BIGINT_255": (()=>BIGINT_255),
    "BIGINT_256": (()=>BIGINT_256),
    "BIGINT_27": (()=>BIGINT_27),
    "BIGINT_28": (()=>BIGINT_28),
    "BIGINT_2EXP160": (()=>BIGINT_2EXP160),
    "BIGINT_2EXP224": (()=>BIGINT_2EXP224),
    "BIGINT_2EXP256": (()=>BIGINT_2EXP256),
    "BIGINT_2EXP96": (()=>BIGINT_2EXP96),
    "BIGINT_3": (()=>BIGINT_3),
    "BIGINT_31": (()=>BIGINT_31),
    "BIGINT_32": (()=>BIGINT_32),
    "BIGINT_64": (()=>BIGINT_64),
    "BIGINT_7": (()=>BIGINT_7),
    "BIGINT_8": (()=>BIGINT_8),
    "BIGINT_96": (()=>BIGINT_96),
    "BIGINT_NEG1": (()=>BIGINT_NEG1),
    "KECCAK256_NULL": (()=>KECCAK256_NULL),
    "KECCAK256_NULL_S": (()=>KECCAK256_NULL_S),
    "KECCAK256_RLP": (()=>KECCAK256_RLP),
    "KECCAK256_RLP_ARRAY": (()=>KECCAK256_RLP_ARRAY),
    "KECCAK256_RLP_ARRAY_S": (()=>KECCAK256_RLP_ARRAY_S),
    "KECCAK256_RLP_S": (()=>KECCAK256_RLP_S),
    "MAX_INTEGER": (()=>MAX_INTEGER),
    "MAX_INTEGER_BIGINT": (()=>MAX_INTEGER_BIGINT),
    "MAX_UINT64": (()=>MAX_UINT64),
    "MAX_WITHDRAWALS_PER_PAYLOAD": (()=>MAX_WITHDRAWALS_PER_PAYLOAD),
    "RIPEMD160_ADDRESS_STRING": (()=>RIPEMD160_ADDRESS_STRING),
    "RLP_EMPTY_STRING": (()=>RLP_EMPTY_STRING),
    "SECP256K1_ORDER": (()=>SECP256K1_ORDER),
    "SECP256K1_ORDER_DIV_2": (()=>SECP256K1_ORDER_DIV_2),
    "TWO_POW256": (()=>TWO_POW256)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/secp256k1.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/curves/esm/secp256k1.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
;
;
const MAX_UINT64 = BigInt('0xffffffffffffffff');
const MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
const MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');
const SECP256K1_ORDER = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].CURVE.n;
const SECP256K1_ORDER_DIV_2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].CURVE.n / BigInt(2);
const TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');
const KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
const KECCAK256_NULL = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(KECCAK256_NULL_S);
const KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
const KECCAK256_RLP_ARRAY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(KECCAK256_RLP_ARRAY_S);
const KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
const KECCAK256_RLP = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(KECCAK256_RLP_S);
const RLP_EMPTY_STRING = Uint8Array.from([
    0x80
]);
const MAX_WITHDRAWALS_PER_PAYLOAD = 16;
const RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';
const BIGINT_NEG1 = BigInt(-1);
const BIGINT_0 = BigInt(0);
const BIGINT_1 = BigInt(1);
const BIGINT_2 = BigInt(2);
const BIGINT_3 = BigInt(3);
const BIGINT_7 = BigInt(7);
const BIGINT_8 = BigInt(8);
const BIGINT_27 = BigInt(27);
const BIGINT_28 = BigInt(28);
const BIGINT_31 = BigInt(31);
const BIGINT_32 = BigInt(32);
const BIGINT_64 = BigInt(64);
const BIGINT_128 = BigInt(128);
const BIGINT_255 = BigInt(255);
const BIGINT_256 = BigInt(256);
const BIGINT_96 = BigInt(96);
const BIGINT_100 = BigInt(100);
const BIGINT_160 = BigInt(160);
const BIGINT_224 = BigInt(224);
const BIGINT_2EXP96 = BigInt(79228162514264337593543950336);
const BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);
const BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);
const BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/units.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "GWEI_TO_WEI": (()=>GWEI_TO_WEI),
    "formatBigDecimal": (()=>formatBigDecimal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
;
const GWEI_TO_WEI = BigInt(1000000000);
function formatBigDecimal(numerator, denominator, maxDecimalFactor) {
    if (denominator === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"]) {
        denominator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_1"];
    }
    const full = numerator / denominator;
    const fraction = (numerator - full * denominator) * maxDecimalFactor / denominator;
    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction
    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;
    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;
} //# sourceMappingURL=units.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/account.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Account": (()=>Account),
    "accountBodyFromSlim": (()=>accountBodyFromSlim),
    "accountBodyToRLP": (()=>accountBodyToRLP),
    "accountBodyToSlim": (()=>accountBodyToSlim),
    "generateAddress": (()=>generateAddress),
    "generateAddress2": (()=>generateAddress2),
    "importPublic": (()=>importPublic),
    "isValidAddress": (()=>isValidAddress),
    "isValidChecksumAddress": (()=>isValidChecksumAddress),
    "isValidPrivate": (()=>isValidPrivate),
    "isValidPublic": (()=>isValidPublic),
    "isZeroAddress": (()=>isZeroAddress),
    "privateToAddress": (()=>privateToAddress),
    "privateToPublic": (()=>privateToPublic),
    "pubToAddress": (()=>pubToAddress),
    "publicToAddress": (()=>publicToAddress),
    "toChecksumAddress": (()=>toChecksumAddress),
    "zeroAddress": (()=>zeroAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/rlp/dist/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/keccak.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/secp256k1.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/curves/esm/secp256k1.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/utils.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
class Account {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating an Account from varying data types.
     * undefined get assigned with the defaults present, but null args are retained as is
     */ constructor(nonce = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"], balance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"], storageRoot = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_RLP"], codeHash = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"], codeSize = null, version = 0){
        this._nonce = null;
        this._balance = null;
        this._storageRoot = null;
        this._codeHash = null;
        // codeSize and version is separately stored in VKT
        this._codeSize = null;
        this._version = null;
        this._nonce = nonce;
        this._balance = balance;
        this._storageRoot = storageRoot;
        this._codeHash = codeHash;
        if (codeSize === null && codeHash !== null && !this.isContract()) {
            codeSize = 0;
        }
        this._codeSize = codeSize;
        this._version = version;
        this._validate();
    }
    get version() {
        if (this._version !== null) {
            return this._version;
        } else {
            throw Error(`version=${this._version} not loaded`);
        }
    }
    set version(_version) {
        this._version = _version;
    }
    get nonce() {
        if (this._nonce !== null) {
            return this._nonce;
        } else {
            throw Error(`nonce=${this._nonce} not loaded`);
        }
    }
    set nonce(_nonce) {
        this._nonce = _nonce;
    }
    get balance() {
        if (this._balance !== null) {
            return this._balance;
        } else {
            throw Error(`balance=${this._balance} not loaded`);
        }
    }
    set balance(_balance) {
        this._balance = _balance;
    }
    get storageRoot() {
        if (this._storageRoot !== null) {
            return this._storageRoot;
        } else {
            throw Error(`storageRoot=${this._storageRoot} not loaded`);
        }
    }
    set storageRoot(_storageRoot) {
        this._storageRoot = _storageRoot;
    }
    get codeHash() {
        if (this._codeHash !== null) {
            return this._codeHash;
        } else {
            throw Error(`codeHash=${this._codeHash} not loaded`);
        }
    }
    set codeHash(_codeHash) {
        this._codeHash = _codeHash;
    }
    get codeSize() {
        if (this._codeSize !== null) {
            return this._codeSize;
        } else {
            throw Error(`codeHash=${this._codeSize} not loaded`);
        }
    }
    set codeSize(_codeSize) {
        this._codeSize = _codeSize;
    }
    static fromAccountData(accountData) {
        const { nonce, balance, storageRoot, codeHash } = accountData;
        if (nonce === null || balance === null || storageRoot === null || codeHash === null) {
            throw Error(`Partial fields not supported in fromAccountData`);
        }
        return new Account(nonce !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(nonce)) : undefined, balance !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(balance)) : undefined, storageRoot !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(storageRoot) : undefined, codeHash !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(codeHash) : undefined);
    }
    static fromPartialAccountData(partialAccountData) {
        const { nonce, balance, storageRoot, codeHash, codeSize, version } = partialAccountData;
        if (nonce === null && balance === null && storageRoot === null && codeHash === null && codeSize === null && version === null) {
            throw Error(`All partial fields null`);
        }
        return new Account(nonce !== undefined && nonce !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(nonce)) : nonce, balance !== undefined && balance !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(balance)) : balance, storageRoot !== undefined && storageRoot !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(storageRoot) : storageRoot, codeHash !== undefined && codeHash !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(codeHash) : codeHash, codeSize !== undefined && codeSize !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(codeSize)) : codeSize, version !== undefined && version !== null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(version)) : version);
    }
    static fromRlpSerializedAccount(serialized) {
        const values = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized account input. Must be array');
        }
        return this.fromValuesArray(values);
    }
    static fromRlpSerializedPartialAccount(serialized) {
        const values = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized account input. Must be array');
        }
        let nonce = null;
        if (!Array.isArray(values[0])) {
            throw new Error('Invalid partial nonce encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[0][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for nonce`);
            }
            if (isNotNullIndicator === 1) {
                nonce = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(values[0][1]);
            }
        }
        let balance = null;
        if (!Array.isArray(values[1])) {
            throw new Error('Invalid partial balance encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[1][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for balance`);
            }
            if (isNotNullIndicator === 1) {
                balance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(values[1][1]);
            }
        }
        let storageRoot = null;
        if (!Array.isArray(values[2])) {
            throw new Error('Invalid partial storageRoot encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[2][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for storageRoot`);
            }
            if (isNotNullIndicator === 1) {
                storageRoot = values[2][1];
            }
        }
        let codeHash = null;
        if (!Array.isArray(values[3])) {
            throw new Error('Invalid partial codeHash encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[3][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeHash`);
            }
            if (isNotNullIndicator === 1) {
                codeHash = values[3][1];
            }
        }
        let codeSize = null;
        if (!Array.isArray(values[4])) {
            throw new Error('Invalid partial codeSize encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[4][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeSize`);
            }
            if (isNotNullIndicator === 1) {
                codeSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[4][1]);
            }
        }
        let version = null;
        if (!Array.isArray(values[5])) {
            throw new Error('Invalid partial version encoding. Must be array');
        } else {
            const isNotNullIndicator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[5][0]);
            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {
                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for version`);
            }
            if (isNotNullIndicator === 1) {
                version = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(values[5][1]);
            }
        }
        return this.fromPartialAccountData({
            balance,
            nonce,
            storageRoot,
            codeHash,
            codeSize,
            version
        });
    }
    static fromValuesArray(values) {
        const [nonce, balance, storageRoot, codeHash] = values;
        return new Account((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(nonce), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(balance), storageRoot, codeHash);
    }
    _validate() {
        if (this._nonce !== null && this._nonce < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"]) {
            throw new Error('nonce must be greater than zero');
        }
        if (this._balance !== null && this._balance < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"]) {
            throw new Error('balance must be greater than zero');
        }
        if (this._storageRoot !== null && this._storageRoot.length !== 32) {
            throw new Error('storageRoot must have a length of 32');
        }
        if (this._codeHash !== null && this._codeHash.length !== 32) {
            throw new Error('codeHash must have a length of 32');
        }
        if (this._codeSize !== null && this._codeSize < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"]) {
            throw new Error('codeSize must be greater than zero');
        }
    }
    /**
     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.
     */ raw() {
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToUnpaddedBytes"])(this.nonce),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToUnpaddedBytes"])(this.balance),
            this.storageRoot,
            this.codeHash
        ];
    }
    /**
     * Returns the RLP serialization of the account as a `Uint8Array`.
     */ serialize() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode(this.raw());
    }
    serializeWithPartialInfo() {
        const partialData = [];
        const zeroEncoded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToUnpaddedBytes"])(0);
        const oneEncoded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToUnpaddedBytes"])(1);
        if (this._nonce !== null) {
            partialData.push([
                oneEncoded,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToUnpaddedBytes"])(this._nonce)
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        if (this._balance !== null) {
            partialData.push([
                oneEncoded,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToUnpaddedBytes"])(this._balance)
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        if (this._storageRoot !== null) {
            partialData.push([
                oneEncoded,
                this._storageRoot
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        if (this._codeHash !== null) {
            partialData.push([
                oneEncoded,
                this._codeHash
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        if (this._codeSize !== null) {
            partialData.push([
                oneEncoded,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToUnpaddedBytes"])(this._codeSize)
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        if (this._version !== null) {
            partialData.push([
                oneEncoded,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToUnpaddedBytes"])(this._version)
            ]);
        } else {
            partialData.push([
                zeroEncoded
            ]);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode(partialData);
    }
    /**
     * Returns a `Boolean` determining if the account is a contract.
     */ isContract() {
        if (this._codeHash === null && this._codeSize === null) {
            throw Error(`Insufficient data as codeHash=null and codeSize=null`);
        }
        return this._codeHash !== null && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(this._codeHash, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"]) || this._codeSize !== null && this._codeSize !== 0;
    }
    /**
     * Returns a `Boolean` determining if the account is empty complying to the definition of
     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
     * "An account is considered empty when it has no code and zero nonce and zero balance."
     */ isEmpty() {
        // helpful for determination in partial accounts
        if (this._balance !== null && this.balance !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || this._nonce === null && this.nonce !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || this._codeHash !== null && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(this.codeHash, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"])) {
            return false;
        }
        return this.balance === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] && this.nonce === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(this.codeHash, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"]);
    }
}
const isValidAddress = function(hexAddress) {
    try {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsString"])(hexAddress);
    } catch (e) {
        return false;
    }
    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
};
const toChecksumAddress = function(hexAddress, eip1191ChainId) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsHexString"])(hexAddress);
    const address = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stripHexPrefix"])(hexAddress).toLowerCase();
    let prefix = '';
    if (eip1191ChainId !== undefined) {
        const chainId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(eip1191ChainId));
        prefix = chainId.toString() + '0x';
    }
    const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utf8ToBytes"])(prefix + address);
    const hash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])(bytes)).slice(2);
    let ret = '';
    for(let i = 0; i < address.length; i++){
        if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
        } else {
            ret += address[i];
        }
    }
    return `0x${ret}`;
};
const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;
};
const generateAddress = function(from, nonce) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(from);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(nonce);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(nonce) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"]) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode([
            from,
            Uint8Array.from([])
        ])).subarray(-20);
    }
    // Only take the lower 160bits of the hash
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode([
        from,
        nonce
    ])).subarray(-20);
};
const generateAddress2 = function(from, salt, initCode) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(from);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(salt);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(initCode);
    if (from.length !== 20) {
        throw new Error('Expected from to be of length 20');
    }
    if (salt.length !== 32) {
        throw new Error('Expected salt to be of length 32');
    }
    const address = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])('0xff'), from, salt, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])(initCode)));
    return address.subarray(-20);
};
const isValidPrivate = function(privateKey) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].utils.isValidPrivateKey(privateKey);
};
const isValidPublic = function(publicKey, sanitize = false) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(publicKey);
    if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        // Automatically checks whether point is on curve
        try {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].ProjectivePoint.fromHex((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(Uint8Array.from([
                4
            ]), publicKey));
            return true;
        } catch (e) {
            return false;
        }
    }
    if (!sanitize) {
        return false;
    }
    try {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].ProjectivePoint.fromHex(publicKey);
        return true;
    } catch (e) {
        return false;
    }
};
const pubToAddress = function(pubKey, sanitize = false) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(pubKey);
    if (sanitize && pubKey.length !== 64) {
        pubKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
    }
    if (pubKey.length !== 64) {
        throw new Error('Expected pubKey to be of length 64');
    }
    // Only take the lower 160bits of the hash
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])(pubKey).subarray(-20);
};
const publicToAddress = pubToAddress;
const privateToPublic = function(privateKey) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(privateKey);
    // skip the type flag and use the X, Y points
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);
};
const privateToAddress = function(privateKey) {
    return publicToAddress(privateToPublic(privateKey));
};
const importPublic = function(publicKey) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(publicKey);
    if (publicKey.length !== 64) {
        publicKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);
    }
    return publicKey;
};
const zeroAddress = function() {
    const addressLength = 20;
    const addr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["zeros"])(addressLength);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(addr);
};
const isZeroAddress = function(hexAddress) {
    try {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsString"])(hexAddress);
    } catch (e) {
        return false;
    }
    const zeroAddr = zeroAddress();
    return zeroAddr === hexAddress;
};
function accountBodyFromSlim(body) {
    const [nonce, balance, storageRoot, codeHash] = body;
    return [
        nonce,
        balance,
        storageRoot.length === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_RLP"] : storageRoot,
        codeHash.length === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"] : codeHash
    ];
}
const emptyUint8Arr = new Uint8Array(0);
function accountBodyToSlim(body) {
    const [nonce, balance, storageRoot, codeHash] = body;
    return [
        nonce,
        balance,
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(storageRoot, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_RLP"]) ? emptyUint8Arr : storageRoot,
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(codeHash, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KECCAK256_NULL"]) ? emptyUint8Arr : codeHash
    ];
}
function accountBodyToRLP(body, couldBeSlim = true) {
    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode(accountBody);
} //# sourceMappingURL=account.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/address.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Address": (()=>Address)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/account.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/utils.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
;
;
;
class Address {
    constructor(bytes){
        if (bytes.length !== 20) {
            throw new Error('Invalid address length');
        }
        this.bytes = bytes;
    }
    /**
     * Returns the zero address.
     */ static zero() {
        return new Address((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["zeros"])(20));
    }
    /**
     * Returns an Address object from a hex-encoded string.
     * @param str - Hex-encoded address
     */ static fromString(str) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidAddress"])(str)) {
            throw new Error(`Invalid address input=${str}`);
        }
        return new Address((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(str));
    }
    /**
     * Returns an address for a given public key.
     * @param pubKey The two points of an uncompressed key
     */ static fromPublicKey(pubKey) {
        if (!(pubKey instanceof Uint8Array)) {
            throw new Error('Public key should be Uint8Array');
        }
        const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubToAddress"])(pubKey);
        return new Address(bytes);
    }
    /**
     * Returns an address for a given private key.
     * @param privateKey A private key must be 256 bits wide
     */ static fromPrivateKey(privateKey) {
        if (!(privateKey instanceof Uint8Array)) {
            throw new Error('Private key should be Uint8Array');
        }
        const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["privateToAddress"])(privateKey);
        return new Address(bytes);
    }
    /**
     * Generates an address for a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */ static generate(from, nonce) {
        if (typeof nonce !== 'bigint') {
            throw new Error('Expected nonce to be a bigint');
        }
        return new Address((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generateAddress"])(from.bytes, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToBytes"])(nonce)));
    }
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */ static generate2(from, salt, initCode) {
        if (!(salt instanceof Uint8Array)) {
            throw new Error('Expected salt to be a Uint8Array');
        }
        if (!(initCode instanceof Uint8Array)) {
            throw new Error('Expected initCode to be a Uint8Array');
        }
        return new Address((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generateAddress2"])(from.bytes, salt, initCode));
    }
    /**
     * Is address equal to another.
     */ equals(address) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["equalsBytes"])(this.bytes, address.bytes);
    }
    /**
     * Is address zero.
     */ isZero() {
        return this.equals(Address.zero());
    }
    /**
     * True if address is in the address range defined
     * by EIP-1352
     */ isPrecompileOrSystemAddress() {
        const address = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(this.bytes);
        const rangeMin = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"];
        const rangeMax = BigInt('0xffff');
        return address >= rangeMin && address <= rangeMax;
    }
    /**
     * Returns hex encoding of address.
     */ toString() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.bytes);
    }
    /**
     * Returns a new Uint8Array representation of address.
     */ toBytes() {
        return new Uint8Array(this.bytes);
    }
} //# sourceMappingURL=address.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/db.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "KeyEncoding": (()=>KeyEncoding),
    "ValueEncoding": (()=>ValueEncoding)
});
var KeyEncoding;
(function(KeyEncoding) {
    KeyEncoding["String"] = "string";
    KeyEncoding["Bytes"] = "view";
    KeyEncoding["Number"] = "number";
})(KeyEncoding || (KeyEncoding = {}));
var ValueEncoding;
(function(ValueEncoding) {
    ValueEncoding["String"] = "string";
    ValueEncoding["Bytes"] = "view";
    ValueEncoding["JSON"] = "json";
})(ValueEncoding || (ValueEncoding = {})); //# sourceMappingURL=db.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/types.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TypeOutput": (()=>TypeOutput),
    "isNestedUint8Array": (()=>isNestedUint8Array),
    "toType": (()=>toType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
;
;
function isNestedUint8Array(value) {
    if (!Array.isArray(value)) {
        return false;
    }
    for (const item of value){
        if (Array.isArray(item)) {
            if (!isNestedUint8Array(item)) {
                return false;
            }
        } else if (!(item instanceof Uint8Array)) {
            return false;
        }
    }
    return true;
}
var TypeOutput;
(function(TypeOutput) {
    TypeOutput[TypeOutput["Number"] = 0] = "Number";
    TypeOutput[TypeOutput["BigInt"] = 1] = "BigInt";
    TypeOutput[TypeOutput["Uint8Array"] = 2] = "Uint8Array";
    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
})(TypeOutput || (TypeOutput = {}));
function toType(input, outputType) {
    if (input === null) {
        return null;
    }
    if (input === undefined) {
        return undefined;
    }
    if (typeof input === 'string' && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
    } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
    }
    const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(input);
    switch(outputType){
        case TypeOutput.Uint8Array:
            return output;
        case TypeOutput.BigInt:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(output);
        case TypeOutput.Number:
            {
                const bigInt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(output);
                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
                    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
                }
                return Number(bigInt);
            }
        case TypeOutput.PrefixedHexString:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(output);
        default:
            throw new Error('unknown outputType');
    }
} //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/withdrawal.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Withdrawal": (()=>Withdrawal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/address.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/types.js [app-ssr] (ecmascript)");
;
;
;
;
class Withdrawal {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.
     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot
     */ constructor(index, validatorIndex, address, /**
     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot
     */ amount){
        this.index = index;
        this.validatorIndex = validatorIndex;
        this.address = address;
        this.amount = amount;
    }
    static fromWithdrawalData(withdrawalData) {
        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;
        const index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(indexData, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt);
        const validatorIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(validatorIndexData, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt);
        const address = addressData instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Address"] ? addressData : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Address"]((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(addressData));
        const amount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(amountData, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt);
        return new Withdrawal(index, validatorIndex, address, amount);
    }
    static fromValuesArray(withdrawalArray) {
        if (withdrawalArray.length !== 4) {
            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);
        }
        const [index, validatorIndex, address, amount] = withdrawalArray;
        return Withdrawal.fromWithdrawalData({
            index,
            validatorIndex,
            address,
            amount
        });
    }
    /**
     * Convert a withdrawal to a buffer array
     * @param withdrawal the withdrawal to convert
     * @returns buffer array of the withdrawal
     */ static toBytesArray(withdrawal) {
        const { index, validatorIndex, address, amount } = withdrawal;
        const indexBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(index, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(index, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].Uint8Array);
        const validatorIndexBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(validatorIndex, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(validatorIndex, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].Uint8Array);
        const addressBytes = address instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Address"] ? address.bytes : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(address, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].Uint8Array);
        const amountBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(amount, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].BigInt) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toType"])(amount, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TypeOutput"].Uint8Array);
        return [
            indexBytes,
            validatorIndexBytes,
            addressBytes,
            amountBytes
        ];
    }
    raw() {
        return Withdrawal.toBytesArray(this);
    }
    toValue() {
        return {
            index: this.index,
            validatorIndex: this.validatorIndex,
            address: this.address.bytes,
            amount: this.amount
        };
    }
    toJSON() {
        return {
            index: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.index),
            validatorIndex: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.validatorIndex),
            address: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.address.bytes),
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.amount)
        };
    }
} //# sourceMappingURL=withdrawal.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/signature.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "calculateSigRecovery": (()=>calculateSigRecovery),
    "ecrecover": (()=>ecrecover),
    "ecsign": (()=>ecsign),
    "fromRpcSig": (()=>fromRpcSig),
    "hashPersonalMessage": (()=>hashPersonalMessage),
    "isValidSignature": (()=>isValidSignature),
    "toCompactSig": (()=>toCompactSig),
    "toRpcSig": (()=>toRpcSig)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/keccak.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/secp256k1.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/curves/esm/secp256k1.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/helpers.js [app-ssr] (ecmascript)");
;
;
;
;
;
function ecsign(msgHash, privateKey, chainId) {
    const sig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].sign(msgHash, privateKey);
    const buf = sig.toCompactRawBytes();
    const r = buf.slice(0, 32);
    const s = buf.slice(32, 64);
    const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_2"];
    return {
        r,
        s,
        v
    };
}
function calculateSigRecovery(v, chainId) {
    if (v === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || v === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_1"]) return v;
    if (chainId === undefined) {
        return v - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_27"];
    }
    return v - (chainId * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_2"] + BigInt(35));
}
function isValidSigRecovery(recovery) {
    return recovery === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || recovery === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_1"];
}
const ecrecover = function(msgHash, v, r, s, chainId) {
    const signature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(r, 32), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(s, 32));
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    const sig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$curves$2f$esm$2f$secp256k1$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["secp256k1"].Signature.fromCompact(signature).addRecoveryBit(Number(recovery));
    const senderPubKey = sig.recoverPublicKey(msgHash);
    return senderPubKey.toRawBytes(false).slice(1);
};
const toRpcSig = function(v, r, s, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(r, 32), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(s, 32), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(v)));
};
const toCompactSig = function(v, r, s, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    const ss = Uint8Array.from([
        ...s
    ]);
    if (v > BigInt(28) && v % __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_2"] === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_1"] || v === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_1"] || v === BigInt(28)) {
        ss[0] |= 0x80;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(r, 32), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(ss, 32)));
};
const fromRpcSig = function(sig) {
    const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(sig);
    let r;
    let s;
    let v;
    if (bytes.length >= 65) {
        r = bytes.subarray(0, 32);
        s = bytes.subarray(32, 64);
        v = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(bytes.subarray(64));
    } else if (bytes.length === 64) {
        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
        r = bytes.subarray(0, 32);
        s = bytes.subarray(32, 64);
        v = BigInt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToInt"])(bytes.subarray(32, 33)) >> 7);
        s[0] &= 0x7f;
    } else {
        throw new Error('Invalid signature length');
    }
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v = v + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_27"];
    }
    return {
        v,
        r,
        s
    };
};
const isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    const rBigInt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(r);
    const sBigInt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(s);
    if (rBigInt === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || rBigInt >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SECP256K1_ORDER"] || sBigInt === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] || sBigInt >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SECP256K1_ORDER"]) {
        return false;
    }
    if (homesteadOrLater && sBigInt >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SECP256K1_ORDER_DIV_2"]) {
        return false;
    }
    return true;
};
const hashPersonalMessage = function(message) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["assertIsBytes"])(message);
    const prefix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utf8ToBytes"])(`\u0019Ethereum Signed Message:\n${message.length}`);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$keccak$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(prefix, message));
}; //# sourceMappingURL=signature.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Ported to Typescript from original implementation below:
 * https://github.com/ahultgren/async-eventemitter -- MIT licensed
 *
 * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed
 * that was contributed to Definitely Typed below:
 * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter
 */ __turbopack_context__.s({
    "AsyncEventEmitter": (()=>AsyncEventEmitter)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$events__$5b$external$5d$__$28$events$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/events [external] (events, cjs)");
;
async function runInSeries(context, tasks, data) {
    let error;
    for await (const task of tasks){
        try {
            if (task.length < 2) {
                //sync
                task.call(context, data);
            } else {
                await new Promise((resolve, reject)=>{
                    task.call(context, data, (error)=>{
                        if (error) {
                            reject(error);
                        } else {
                            resolve();
                        }
                    });
                });
            }
        } catch (e) {
            error = e;
        }
    }
    if (error) {
        throw error;
    }
}
class AsyncEventEmitter extends __TURBOPACK__imported__module__$5b$externals$5d2f$events__$5b$external$5d$__$28$events$2c$__cjs$29$__["EventEmitter"] {
    emit(event, ...args) {
        let [data, callback] = args;
        const self = this;
        let listeners = self._events[event] ?? [];
        // Optional data argument
        if (callback === undefined && typeof data === 'function') {
            callback = data;
            data = undefined;
        }
        // Special treatment of internal newListener and removeListener events
        if (event === 'newListener' || event === 'removeListener') {
            data = {
                event: data,
                fn: callback
            };
            callback = undefined;
        }
        // A single listener is just a function not an array...
        listeners = Array.isArray(listeners) ? listeners : [
            listeners
        ];
        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);
        return self.listenerCount(event) > 0;
    }
    once(event, listener) {
        const self = this;
        let g;
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        // Hack to support set arity
        if (listener.length >= 2) {
            g = function(e, next) {
                self.removeListener(event, g);
                void listener(e, next);
            };
        } else {
            g = function(e) {
                self.removeListener(event, g);
                void listener(e, g);
            };
        }
        self.on(event, g);
        return self;
    }
    first(event, listener) {
        let listeners = this._events[event] ?? [];
        // Contract
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        // Listeners are not always an array
        if (!Array.isArray(listeners)) {
            ;
            this._events[event] = listeners = [
                listeners
            ];
        }
        listeners.unshift(listener);
        return this;
    }
    before(event, target, listener) {
        return this.beforeOrAfter(event, target, listener);
    }
    after(event, target, listener) {
        return this.beforeOrAfter(event, target, listener, 'after');
    }
    beforeOrAfter(event, target, listener, beforeOrAfter) {
        let listeners = this._events[event] ?? [];
        let i;
        let index;
        const add = beforeOrAfter === 'after' ? 1 : 0;
        // Contract
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        if (typeof target !== 'function') {
            throw new TypeError('target must be a function');
        }
        // Listeners are not always an array
        if (!Array.isArray(listeners)) {
            ;
            this._events[event] = listeners = [
                listeners
            ];
        }
        index = listeners.length;
        for(i = listeners.length; i--;){
            if (listeners[i] === target) {
                index = i + add;
                break;
            }
        }
        listeners.splice(index, 0, listener);
        return this;
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    addListener(event, listener) {
        return super.addListener(event, listener);
    }
    prependListener(event, listener) {
        return super.prependListener(event, listener);
    }
    prependOnceListener(event, listener) {
        return super.prependOnceListener(event, listener);
    }
    removeAllListeners(event) {
        return super.removeAllListeners(event);
    }
    removeListener(event, listener) {
        return super.removeListener(event, listener);
    }
    eventNames() {
        return super.eventNames();
    }
    listeners(event) {
        return super.listeners(event);
    }
    listenerCount(event) {
        return super.listenerCount(event);
    }
    getMaxListeners() {
        return super.getMaxListeners();
    }
    setMaxListeners(maxListeners) {
        return super.setMaxListeners(maxListeners);
    }
} //# sourceMappingURL=asyncEventEmitter.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/blobs.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "blobsToCommitments": (()=>blobsToCommitments),
    "blobsToProofs": (()=>blobsToProofs),
    "commitmentsToVersionedHashes": (()=>commitmentsToVersionedHashes),
    "computeVersionedHash": (()=>computeVersionedHash),
    "getBlobs": (()=>getBlobs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/sha256.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
;
;
/**
 * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git
 */ const BYTES_PER_FIELD_ELEMENT = 32;
const FIELD_ELEMENTS_PER_BLOB = 4096;
const USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;
const MAX_BLOBS_PER_TX = 2;
const MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;
const BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;
function get_padded(data, blobs_len) {
    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);
    pdata.set(data);
    pdata[data.byteLength] = 0x80;
    return pdata;
}
function get_blob(data) {
    const blob = new Uint8Array(BLOB_SIZE);
    for(let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++){
        const chunk = new Uint8Array(32);
        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);
        blob.set(chunk, i * 32);
    }
    return blob;
}
const getBlobs = (input)=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utf8ToBytes"])(input);
    const len = data.byteLength;
    if (len === 0) {
        throw Error('invalid blob data');
    }
    if (len > MAX_USEFUL_BYTES_PER_TX) {
        throw Error('blob data is too large');
    }
    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);
    const pdata = get_padded(data, blobs_len);
    const blobs = [];
    for(let i = 0; i < blobs_len; i++){
        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);
        const blob = get_blob(chunk);
        blobs.push(blob);
    }
    return blobs;
};
const blobsToCommitments = (kzg, blobs)=>{
    const commitments = [];
    for (const blob of blobs){
        commitments.push(kzg.blobToKzgCommitment(blob));
    }
    return commitments;
};
const blobsToProofs = (kzg, blobs, commitments)=>{
    const proofs = blobs.map((blob, ctx)=>kzg.computeBlobKzgProof(blob, commitments[ctx]));
    return proofs;
};
const computeVersionedHash = (commitment, blobCommitmentVersion)=>{
    const computedVersionedHash = new Uint8Array(32);
    computedVersionedHash.set([
        blobCommitmentVersion
    ], 0);
    computedVersionedHash.set((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(commitment).subarray(1), 1);
    return computedVersionedHash;
};
const commitmentsToVersionedHashes = (commitments)=>{
    const hashes = [];
    for (const commitment of commitments){
        hashes.push(computeVersionedHash(commitment, 0x01));
    }
    return hashes;
}; //# sourceMappingURL=blobs.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/genesis.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseGethGenesisState": (()=>parseGethGenesisState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
;
;
function parseGethGenesisState(json) {
    const state = {};
    for (const address of Object.keys(json.alloc)){
        let { balance, code, storage, nonce } = json.alloc[address];
        // create a map with lowercase for easy lookups
        const prefixedAddress = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["addHexPrefix"])(address.toLowerCase());
        balance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHexString"])(balance) ? balance : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(BigInt(balance));
        code = code !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["addHexPrefix"])(code) : undefined;
        storage = storage !== undefined ? Object.entries(storage) : undefined;
        nonce = nonce !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["addHexPrefix"])(nonce) : undefined;
        state[prefixedAddress] = [
            balance,
            code,
            storage,
            nonce
        ];
    }
    return state;
} //# sourceMappingURL=genesis.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/kzg.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @deprecated This initialization method is deprecated since trusted setup loading is done directly in the reference KZG library
 * initialization or should othewise be assured independently before KZG libary usage.
 *
 * @param kzgLib a KZG implementation (defaults to c-kzg)
 * @param a dictionary of trusted setup options
 */ __turbopack_context__.s({
    "initKZG": (()=>initKZG)
});
function initKZG(kzg, _trustedSetupPath) {
    kzg.loadTrustedSetup();
} //# sourceMappingURL=kzg.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/lock.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts
__turbopack_context__.s({
    "Lock": (()=>Lock)
});
class Lock {
    constructor(){
        this.permits = 1;
        this.promiseResolverQueue = [];
    }
    /**
     * Returns a promise used to wait for a permit to become available. This method should be awaited on.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */ async acquire() {
        if (this.permits > 0) {
            this.permits -= 1;
            return Promise.resolve(true);
        }
        // If there is no permit available, we return a promise that resolves once the semaphore gets
        // signaled enough times that permits is equal to one.
        return new Promise((resolver)=>this.promiseResolverQueue.push(resolver));
    }
    /**
     * Increases the number of permits by one. If there are other functions waiting, one of them will
     * continue to execute in a future iteration of the event loop.
     */ release() {
        this.permits += 1;
        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {
            // eslint-disable-next-line no-console
            console.warn('Lock.permits should never be > 0 when there is someone waiting.');
        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
            // If there is someone else waiting, immediately consume the permit that was released
            // at the beginning of this function and let the waiting function resume.
            this.permits -= 1;
            const nextResolver = this.promiseResolverQueue.shift();
            if (nextResolver) {
                nextResolver(true);
            }
        }
    }
} //# sourceMappingURL=lock.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/mapDB.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MapDB": (()=>MapDB)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
;
class MapDB {
    constructor(database){
        this._database = database ?? new Map();
    }
    async get(key) {
        const dbKey = key instanceof Uint8Array ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToUnprefixedHex"])(key) : key.toString();
        return this._database.get(dbKey);
    }
    async put(key, val) {
        const dbKey = key instanceof Uint8Array ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToUnprefixedHex"])(key) : key.toString();
        this._database.set(dbKey, val);
    }
    async del(key) {
        const dbKey = key instanceof Uint8Array ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToUnprefixedHex"])(key) : key.toString();
        this._database.delete(dbKey);
    }
    async batch(opStack) {
        for (const op of opStack){
            if (op.type === 'del') {
                await this.del(op.key);
            }
            if (op.type === 'put') {
                await this.put(op.key, op.value);
            }
        }
    }
    /**
     * Note that the returned shallow copy will share the underlying database with the original
     *
     * @returns DB
     */ shallowCopy() {
        return new MapDB(this._database);
    }
    open() {
        return Promise.resolve();
    }
} //# sourceMappingURL=mapDB.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/provider.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.
 * No parameter or response validation is done.
 *
 * @param url the URL for the JSON RPC provider
 * @param params the parameters for the JSON-RPC method - refer to
 * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods
 * @returns the `result` field from the JSON-RPC response
 * @example
 * ```ts
 * const provider = 'https://mainnet.infura.io/v3/...'
 * const params = {
 *   method: 'eth_getBlockByNumber',
 *   params: ['latest', false],
 * }
 * const block = await fetchFromProvider(provider, params)
 * ```
 */ __turbopack_context__.s({
    "fetchFromProvider": (()=>fetchFromProvider),
    "getProvider": (()=>getProvider)
});
const fetchFromProvider = async (url, params)=>{
    const data = JSON.stringify({
        method: params.method,
        params: params.params,
        jsonrpc: '2.0',
        id: 1
    });
    const res = await fetch(url, {
        headers: {
            'content-type': 'application/json'
        },
        method: 'POST',
        body: data
    });
    if (!res.ok) {
        throw new Error(`JSONRpcError: ${JSON.stringify({
            method: params.method,
            status: res.status,
            message: await res.text().catch(()=>{
                return 'Could not parse error message likely because of a network error';
            })
        }, null, 2)}`);
    }
    const json = await res.json();
    // TODO we should check json.error here
    return json.result;
};
const getProvider = (provider)=>{
    if (typeof provider === 'string') {
        return provider;
    } else if (typeof provider === 'object' && provider._getConnection !== undefined) {
        return provider._getConnection().url;
    } else {
        throw new Error('Must provide valid provider URL or Web3Provider');
    }
}; //# sourceMappingURL=provider.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/requests.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CLRequest": (()=>CLRequest),
    "CLRequestFactory": (()=>CLRequestFactory),
    "CLRequestType": (()=>CLRequestType),
    "ConsolidationRequest": (()=>ConsolidationRequest),
    "DepositRequest": (()=>DepositRequest),
    "WithdrawalRequest": (()=>WithdrawalRequest)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/rlp/dist/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/esm/utils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethereum-cryptography/node_modules/@noble/hashes/esm/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
;
;
;
;
var CLRequestType;
(function(CLRequestType) {
    CLRequestType[CLRequestType["Deposit"] = 0] = "Deposit";
    CLRequestType[CLRequestType["Withdrawal"] = 1] = "Withdrawal";
    CLRequestType[CLRequestType["Consolidation"] = 2] = "Consolidation";
})(CLRequestType || (CLRequestType = {}));
class CLRequest {
    constructor(type){
        this.type = type;
    }
}
class DepositRequest extends CLRequest {
    constructor(pubkey, withdrawalCredentials, amount, signature, index){
        super(CLRequestType.Deposit);
        this.pubkey = pubkey;
        this.withdrawalCredentials = withdrawalCredentials;
        this.amount = amount;
        this.signature = signature;
        this.index = index;
    }
    static fromRequestData(depositData) {
        const { pubkey, withdrawalCredentials, amount, signature, index } = depositData;
        return new DepositRequest(pubkey, withdrawalCredentials, amount, signature, index);
    }
    static fromJSON(jsonData) {
        const { pubkey, withdrawalCredentials, amount, signature, index } = jsonData;
        return this.fromRequestData({
            pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(pubkey),
            withdrawalCredentials: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(withdrawalCredentials),
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(amount),
            signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(signature),
            index: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(index)
        });
    }
    serialize() {
        const indexBytes = this.index === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToBytes"])(this.index);
        const amountBytes = this.amount === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToBytes"])(this.amount);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["concatBytes"])(Uint8Array.from([
            this.type
        ]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode([
            this.pubkey,
            this.withdrawalCredentials,
            amountBytes,
            this.signature,
            indexBytes
        ]));
    }
    toJSON() {
        return {
            pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.pubkey),
            withdrawalCredentials: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.withdrawalCredentials),
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.amount),
            signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.signature),
            index: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.index)
        };
    }
    static deserialize(bytes) {
        const [pubkey, withdrawalCredentials, amount, signature, index] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].decode(bytes.slice(1));
        return this.fromRequestData({
            pubkey,
            withdrawalCredentials,
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(amount),
            signature,
            index: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(index)
        });
    }
}
class WithdrawalRequest extends CLRequest {
    constructor(sourceAddress, validatorPubkey, amount){
        super(CLRequestType.Withdrawal);
        this.sourceAddress = sourceAddress;
        this.validatorPubkey = validatorPubkey;
        this.amount = amount;
    }
    static fromRequestData(withdrawalData) {
        const { sourceAddress, validatorPubkey, amount } = withdrawalData;
        return new WithdrawalRequest(sourceAddress, validatorPubkey, amount);
    }
    static fromJSON(jsonData) {
        const { sourceAddress, validatorPubkey, amount } = jsonData;
        return this.fromRequestData({
            sourceAddress: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(sourceAddress),
            validatorPubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(validatorPubkey),
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(amount)
        });
    }
    serialize() {
        const amountBytes = this.amount === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BIGINT_0"] ? new Uint8Array() : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToBytes"])(this.amount);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["concatBytes"])(Uint8Array.from([
            this.type
        ]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode([
            this.sourceAddress,
            this.validatorPubkey,
            amountBytes
        ]));
    }
    toJSON() {
        return {
            sourceAddress: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.sourceAddress),
            validatorPubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.validatorPubkey),
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToHex"])(this.amount)
        };
    }
    static deserialize(bytes) {
        const [sourceAddress, validatorPubkey, amount] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].decode(bytes.slice(1));
        return this.fromRequestData({
            sourceAddress,
            validatorPubkey,
            amount: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToBigInt"])(amount)
        });
    }
}
class ConsolidationRequest extends CLRequest {
    constructor(sourceAddress, sourcePubkey, targetPubkey){
        super(CLRequestType.Consolidation);
        this.sourceAddress = sourceAddress;
        this.sourcePubkey = sourcePubkey;
        this.targetPubkey = targetPubkey;
    }
    static fromRequestData(consolidationData) {
        const { sourceAddress, sourcePubkey, targetPubkey } = consolidationData;
        return new ConsolidationRequest(sourceAddress, sourcePubkey, targetPubkey);
    }
    static fromJSON(jsonData) {
        const { sourceAddress, sourcePubkey, targetPubkey } = jsonData;
        return this.fromRequestData({
            sourceAddress: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(sourceAddress),
            sourcePubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(sourcePubkey),
            targetPubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBytes"])(targetPubkey)
        });
    }
    serialize() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethereum$2d$cryptography$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["concatBytes"])(Uint8Array.from([
            this.type
        ]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].encode([
            this.sourceAddress,
            this.sourcePubkey,
            this.targetPubkey
        ]));
    }
    toJSON() {
        return {
            sourceAddress: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.sourceAddress),
            sourcePubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.sourcePubkey),
            targetPubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(this.targetPubkey)
        };
    }
    static deserialize(bytes) {
        const [sourceAddress, sourcePubkey, targetPubkey] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$rlp$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["RLP"].decode(bytes.slice(1));
        return this.fromRequestData({
            sourceAddress,
            sourcePubkey,
            targetPubkey
        });
    }
}
class CLRequestFactory {
    static fromSerializedRequest(bytes) {
        switch(bytes[0]){
            case CLRequestType.Deposit:
                return DepositRequest.deserialize(bytes);
            case CLRequestType.Withdrawal:
                return WithdrawalRequest.deserialize(bytes);
            case CLRequestType.Consolidation:
                return ConsolidationRequest.deserialize(bytes);
            default:
                throw Error(`Invalid request type=${bytes[0]}`);
        }
    }
} //# sourceMappingURL=requests.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/verkle.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "VERKLE_BALANCE_LEAF_KEY": (()=>VERKLE_BALANCE_LEAF_KEY),
    "VERKLE_CODE_HASH_LEAF_KEY": (()=>VERKLE_CODE_HASH_LEAF_KEY),
    "VERKLE_CODE_OFFSET": (()=>VERKLE_CODE_OFFSET),
    "VERKLE_CODE_SIZE_LEAF_KEY": (()=>VERKLE_CODE_SIZE_LEAF_KEY),
    "VERKLE_HEADER_STORAGE_OFFSET": (()=>VERKLE_HEADER_STORAGE_OFFSET),
    "VERKLE_MAIN_STORAGE_OFFSET": (()=>VERKLE_MAIN_STORAGE_OFFSET),
    "VERKLE_NODE_WIDTH": (()=>VERKLE_NODE_WIDTH),
    "VERKLE_NONCE_LEAF_KEY": (()=>VERKLE_NONCE_LEAF_KEY),
    "VERKLE_VERSION_LEAF_KEY": (()=>VERKLE_VERSION_LEAF_KEY),
    "VerkleLeafType": (()=>VerkleLeafType),
    "chunkifyCode": (()=>chunkifyCode),
    "getVerkleKey": (()=>getVerkleKey),
    "getVerkleStem": (()=>getVerkleStem),
    "getVerkleTreeIndexesForStorageSlot": (()=>getVerkleTreeIndexesForStorageSlot),
    "getVerkleTreeIndicesForCodeChunk": (()=>getVerkleTreeIndicesForCodeChunk),
    "getVerkleTreeKeyForCodeChunk": (()=>getVerkleTreeKeyForCodeChunk),
    "getVerkleTreeKeyForStorageSlot": (()=>getVerkleTreeKeyForStorageSlot),
    "verifyVerkleProof": (()=>verifyVerkleProof)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <locals>");
;
function getVerkleStem(ffi, address, treeIndex = 0) {
    const address32 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthLeft"])(address.toBytes(), 32);
    let treeIndexBytes;
    if (typeof treeIndex === 'number') {
        treeIndexBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthRight"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["int32ToBytes"])(Number(treeIndex), true), 32);
    } else {
        treeIndexBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthRight"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bigIntToBytes"])(BigInt(treeIndex), true).slice(0, 32), 32);
    }
    const treeStem = ffi.getTreeKey(address32, treeIndexBytes, 0).slice(0, 31);
    return treeStem;
}
function verifyVerkleProof(ffi, prestateRoot, executionWitness) {
    return ffi.verifyExecutionWitnessPreState((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["bytesToHex"])(prestateRoot), JSON.stringify(executionWitness));
}
var VerkleLeafType;
(function(VerkleLeafType) {
    VerkleLeafType[VerkleLeafType["Version"] = 0] = "Version";
    VerkleLeafType[VerkleLeafType["Balance"] = 1] = "Balance";
    VerkleLeafType[VerkleLeafType["Nonce"] = 2] = "Nonce";
    VerkleLeafType[VerkleLeafType["CodeHash"] = 3] = "CodeHash";
    VerkleLeafType[VerkleLeafType["CodeSize"] = 4] = "CodeSize";
})(VerkleLeafType || (VerkleLeafType = {}));
const VERKLE_VERSION_LEAF_KEY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToBytes"])(VerkleLeafType.Version);
const VERKLE_BALANCE_LEAF_KEY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToBytes"])(VerkleLeafType.Balance);
const VERKLE_NONCE_LEAF_KEY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToBytes"])(VerkleLeafType.Nonce);
const VERKLE_CODE_HASH_LEAF_KEY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToBytes"])(VerkleLeafType.CodeHash);
const VERKLE_CODE_SIZE_LEAF_KEY = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["intToBytes"])(VerkleLeafType.CodeSize);
const VERKLE_HEADER_STORAGE_OFFSET = 64;
const VERKLE_CODE_OFFSET = 128;
const VERKLE_NODE_WIDTH = 256;
const VERKLE_MAIN_STORAGE_OFFSET = BigInt(256) ** BigInt(31);
const getVerkleKey = (stem, leaf)=>{
    switch(leaf){
        case VerkleLeafType.Version:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, VERKLE_VERSION_LEAF_KEY);
        case VerkleLeafType.Balance:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, VERKLE_BALANCE_LEAF_KEY);
        case VerkleLeafType.Nonce:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, VERKLE_NONCE_LEAF_KEY);
        case VerkleLeafType.CodeHash:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, VERKLE_CODE_HASH_LEAF_KEY);
        case VerkleLeafType.CodeSize:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, VERKLE_CODE_SIZE_LEAF_KEY);
        default:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(stem, leaf);
    }
};
function getVerkleTreeIndexesForStorageSlot(storageKey) {
    let position;
    if (storageKey < VERKLE_CODE_OFFSET - VERKLE_HEADER_STORAGE_OFFSET) {
        position = BigInt(VERKLE_HEADER_STORAGE_OFFSET) + storageKey;
    } else {
        position = VERKLE_MAIN_STORAGE_OFFSET + storageKey;
    }
    const treeIndex = position / BigInt(VERKLE_NODE_WIDTH);
    const subIndex = Number(position % BigInt(VERKLE_NODE_WIDTH));
    return {
        treeIndex,
        subIndex
    };
}
function getVerkleTreeIndicesForCodeChunk(chunkId) {
    const treeIndex = Math.floor((VERKLE_CODE_OFFSET + chunkId) / VERKLE_NODE_WIDTH);
    const subIndex = (VERKLE_CODE_OFFSET + chunkId) % VERKLE_NODE_WIDTH;
    return {
        treeIndex,
        subIndex
    };
}
const getVerkleTreeKeyForCodeChunk = async (address, chunkId, verkleCrypto)=>{
    const { treeIndex, subIndex } = getVerkleTreeIndicesForCodeChunk(chunkId);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(getVerkleStem(verkleCrypto, address, treeIndex), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(subIndex));
};
const chunkifyCode = (code)=>{
    // Pad code to multiple of 31 bytes
    if (code.length % 31 !== 0) {
        const paddingLength = 31 - code.length % 31;
        code = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setLengthRight"])(code, code.length + paddingLength);
    }
    throw new Error('Not implemented');
};
const getVerkleTreeKeyForStorageSlot = async (address, storageKey, verkleCrypto)=>{
    const { treeIndex, subIndex } = getVerkleTreeIndexesForStorageSlot(storageKey);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["concatBytes"])(getVerkleStem(verkleCrypto, address, treeIndex), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toBytes"])(subIndex));
}; //# sourceMappingURL=verkle.js.map
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Constants
 */ __turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
/**
 * Units helpers
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$units$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/units.js [app-ssr] (ecmascript)");
/**
 * Account class and helper functions
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/account.js [app-ssr] (ecmascript)");
/**
 * Address type
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/address.js [app-ssr] (ecmascript)");
/**
 * DB type
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$db$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/db.js [app-ssr] (ecmascript)");
/**
 * Withdrawal type
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$withdrawal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/withdrawal.js [app-ssr] (ecmascript)");
/**
 * ECDSA signature
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$signature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/signature.js [app-ssr] (ecmascript)");
/**
 * Utilities for manipulating bytes, Uint8Arrays, etc.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
/**
 * Helpful TypeScript types
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/types.js [app-ssr] (ecmascript)");
/**
 * Export ethjs-util methods
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$asyncEventEmitter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$blobs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/blobs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$genesis$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/genesis.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$kzg$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/kzg.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$lock$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/lock.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$mapDB$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/mapDB.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$requests$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/requests.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$verkle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/verkle.js [app-ssr] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@ethereumjs/util/dist/esm/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$units$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/units.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$account$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/account.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/address.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$db$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/db.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$withdrawal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/withdrawal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$signature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/signature.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$bytes$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/bytes.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$asyncEventEmitter$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$blobs$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/blobs.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$genesis$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/genesis.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$internal$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/internal.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$kzg$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/kzg.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$lock$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/lock.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$mapDB$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/mapDB.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$requests$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/requests.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$verkle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/verkle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethereumjs$2f$util$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethereumjs/util/dist/esm/index.js [app-ssr] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_%40ethereumjs_util_dist_esm_99d025fa._.js.map